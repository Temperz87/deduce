import Nat
import List

// order: least-significant first

function inc(List<bool>) -> List<bool> {
  inc(empty) = node(true, empty)
  inc(node(b, bs')) =
     if b then
       node(false, inc(bs'))
     else
       node(true, bs')
}

function add_nb(Nat, List<bool>) -> List<bool> {
  add_nb(0, bs) = bs
  add_nb(suc(n'), bs) = inc(add_nb(n', bs))
}

function to_binary(Nat) -> List<bool> {
  to_binary(zero) = node(false, empty)
  to_binary(suc(n)) = inc(to_binary(n))
}

assert to_binary(0) = node(false, empty)
assert to_binary(1) = node(true, empty)
assert to_binary(2) = node(false, node(true, empty))
assert to_binary(3) = node(true, node(true, empty))
assert to_binary(4) = node(false, node(false, node(true, empty)))
assert to_binary(5) = node(true, node(false, node(true, empty)))
assert to_binary(6) = node(false, node(true, node(true, empty)))
assert to_binary(7) = node(true, node(true, node(true, empty)))
assert to_binary(8) = node(false, node(false, node(false, node(true, empty))))
assert to_binary(9) = node(true, node(false, node(false, node(true, empty))))

function from_binary(List<bool>) -> Nat {
  from_binary(empty) = 0
  from_binary(node(b, bs)) =
    if b then
      suc(2 * from_binary(bs))
    else
      2 * from_binary(bs)
}

assert from_binary(node(false, empty)) = 0
assert from_binary(node(true, empty)) = 1
assert from_binary(node(false, node(true, empty))) = 2
assert from_binary(node(true, node(true, empty))) = 3
assert from_binary(node(false, node(false, node(true, empty)))) = 4

define log : fn Nat -> Nat = λn{ pred(length(to_binary(n))) }

assert log(1) = 0
assert log(2) = 1
assert log(3) = 1
assert log(4) = 2
assert log(5) = 2
assert log(6) = 2
assert log(7) = 2
assert log(8) = 3
assert log(9) = 3
assert log(10) = 3
assert log(11) = 3
assert log(12) = 3
assert log(13) = 3
assert log(14) = 3
assert log(15) = 3
assert log(16) = 4

function iter_times2(Nat, Nat) -> Nat {
  iter_times2(0, m) = m
  iter_times2(suc(n'), m) = 2 * iter_times2(n', m)
}

define dub : fn List<bool> -> List<bool>
   = λbs{ node(false, bs) }

function dv2(List<bool>) -> List<bool> {
  dv2(empty) = empty
  dv2(node(b, bs)) = bs
}

function iter_dub(Nat, List<bool>) -> List<bool> {
  iter_dub(0, bs) = bs
  iter_dub(suc(n'), bs) = dub(iter_dub(n', bs))
}

function iter_dv2(Nat, List<bool>) -> List<bool> {
  iter_dv2(0, bs) = bs
  iter_dv2(suc(n'), bs) = iter_dv2(n', dv2(bs))
}

theorem from_inc:  all bs:List<bool>.
  from_binary(inc(bs)) = suc(from_binary(bs))
proof
  induction List<bool>
  case empty {
    equations
          from_binary(inc(empty))
        = from_binary(node(true,empty))         by definition inc
    ... = suc(2 * 0)                            by definition {from_binary, from_binary}
    ... = 1                                     by rewrite mult_zero[2]
    ... =# suc(from_binary(empty)) #            by definition from_binary
  }
  case node(b, bs') suppose IH: from_binary(inc(bs')) = suc(from_binary(bs')) {
    switch b {
      case true {
        equations
                from_binary(inc(node(true,bs')))
              = 2 * from_binary(inc(bs'))               by definition {inc, from_binary}
          ... = 2 * suc(from_binary(bs'))               by rewrite IH
          ... = suc(from_binary(bs')) + suc(from_binary(bs'))
                  by two_mult
          ... = suc(from_binary(bs') + suc(from_binary(bs')))
                  by definition operator+
          ... = suc(suc(from_binary(bs') + from_binary(bs')))
                  by rewrite add_suc[from_binary(bs')][from_binary(bs')]
          ... =# suc(suc(2 * from_binary(bs'))) #       by rewrite two_mult[from_binary(bs')]
          ... =# suc(from_binary(node(true,bs'))) #     by definition {from_binary}
      }
      case false {
        equations
              from_binary(inc(node(false,bs')))
            = from_binary(node(true,bs'))               by definition inc
        ... = suc(2 * from_binary(bs'))                 by definition from_binary
        ... =# suc(from_binary(node(false,bs'))) #      by definition from_binary
      }
    }
  }
end

theorem from_to_binary: all n:Nat.
  from_binary(to_binary(n)) = n
proof
  induction Nat
  case 0 {
    equations
          from_binary(to_binary(0))
        = from_binary(node(false,empty))  by definition to_binary
    ... = 2 * 0                           by definition {from_binary, from_binary}
    ... = 0                               by mult_zero[2]
  }
  case suc(n') suppose IH: from_binary(to_binary(n')) = n' {
    equations
          from_binary(to_binary(suc(n')))
        = from_binary(inc(to_binary(n')))   by definition to_binary
    ... = suc(from_binary(to_binary(n')))   by rewrite from_inc[to_binary(n')]
    ... = suc(n')                           by rewrite IH
  }
end

/*
theorem log_pow_inverse: all n:Nat.
  log(pow2(n)) = n
proof
  induction Nat
  case 0 {
    _definition {pow2, log, to_binary, to_binary, inc, length, pred}.
  }
  case suc(n') suppose IH: log(pow2(n')) = n' {
    _definition {pow2, log}
    suffices pred(length(to_binary(2 * pow2(n')))) = suc(n')
    ?
  }
end
*/

theorem length_inc: all b:List<bool>.
  0 < length(inc(b))
proof
  arbitrary b:List<bool>
  switch b {
    case empty {
      suffices 0 < length(node(true,empty))       by definition inc
      suffices 0 < 1 + 0  by definition {length, length}
      suffices 0 < 1      by rewrite add_zero[1]
      definition {operator <, operator ≤, operator ≤}
    }
    case node(d, b') {
      switch d for inc {
        case true {
          suffices 0 < 1 + length(inc(b')) by definition length
          less_one_add[length(inc(b'))]
	}
	case false {
          suffices 0 < 1 + length(b') by definition length
          less_one_add[length(b')]
	}
      }
    }
  }
end

theorem add_nb_inc: all m:Nat. all bs:List<bool>.
  add_nb(m,inc(bs)) = inc(add_nb(m,bs))
proof
  induction Nat
  case 0 {
    arbitrary bs:List<bool>
    definition add_nb
  }
  case suc(m') suppose IH {
    arbitrary bs:List<bool>
    definition add_nb and rewrite IH[bs]
  }
end

theorem add_suc_to:  all m:Nat, n:Nat.
  add_nb(suc(m), to_binary(n)) = add_nb(m, to_binary(suc(n)))
proof
  arbitrary m:Nat, n:Nat
  suffices inc(add_nb(m, to_binary(n))) = add_nb(m, inc(to_binary(n)))
      by definition {to_binary, add_nb}
  symmetric add_nb_inc[m][to_binary(n)]
end

theorem add_nb_shift: all m:Nat, bs:List<bool>.
  add_nb(m, inc(bs)) = add_nb(suc(m), bs)
proof
  arbitrary m:Nat, bs:List<bool>
  suffices add_nb(m, inc(bs)) = inc(add_nb(m, bs))
      by definition add_nb
  add_nb_inc[m][bs]
end

theorem to_binary_add: all m:Nat. all n:Nat.
  to_binary(m + n) = add_nb(m, to_binary(n))
proof
  induction Nat
  case 0 {
    arbitrary n:Nat
    definition {operator +, add_nb}
  }
  case suc(m') suppose IH {
    arbitrary n:Nat
    definition {operator +, add_nb, to_binary}
    and rewrite IH[n]
  }
end

theorem to_binary_2: all n:Nat.
  to_binary(2 * n) = add_nb(n, to_binary(n))
proof
  arbitrary n:Nat
  suffices to_binary(n + n) = add_nb(n, to_binary(n))
      by definition {operator*,operator*,operator*}
         and rewrite add_zero[n]
  to_binary_add[n][n]
end

theorem binary_times_2: all bs:List<bool>.
  from_binary(dub(bs)) = 2 * from_binary(bs)
proof
  arbitrary bs:List<bool>
  definition {dub,from_binary}
end

theorem length_dub: all bs:List<bool>.
  length(dub(bs)) = 1 + length(bs)
proof
  arbitrary bs:List<bool>
  definition {dub, length}
end

theorem length_iter_dub: all n:Nat. all bs:List<bool>.
  length(iter_dub(n, bs)) = n + length(bs)
proof
  induction Nat
  case 0 {
    arbitrary bs:List<bool>
    definition {iter_dub,operator+}
  }
  case suc(n') suppose IH {
    arbitrary bs:List<bool>
    suffices 1 + length(iter_dub(n', bs)) = suc(n') + length(bs)
        by definition {iter_dub, dub, length}
    rewrite IH[bs] | suc_one_add[n']
  }
end

theorem length_iter_dub_bin: all n:Nat.
  length(iter_dub(n, to_binary(1))) = suc(n)
proof
  arbitrary n:Nat
  suffices n + length(to_binary(1)) = suc(n)
      by rewrite length_iter_dub[n][to_binary(1)]
  suffices n + (1 + 0) = suc(n)
      by definition {to_binary, to_binary, inc, length, length}
  rewrite add_zero[1] | suc_one_add[n] | add_commute[1][n]
end

assert iter_dub( 1, to_binary(1) ) = to_binary(2)
assert iter_dub( 2, to_binary(1) ) = to_binary(4)
assert iter_dub( 3, to_binary(1) ) = to_binary(8)
assert iter_dub( 4, to_binary(1) ) = to_binary(16)

assert log(from_binary(iter_dub( 0, to_binary(1) ))) = 0
assert log(from_binary(iter_dub( 1, to_binary(1) ))) = 1
assert log(from_binary(iter_dub( 2, to_binary(1) ))) = 2
assert log(from_binary(iter_dub( 3, to_binary(1) ))) = 3


theorem iter_dub_times2: all n:Nat. all bs:List<bool>.
  from_binary(iter_dub(n, bs)) = iter_times2(n, from_binary(bs))
proof
  induction Nat
  case 0 {
    arbitrary bs:List<bool>
    definition {iter_dub,iter_times2}
  }
  case suc(n') suppose IH {
    arbitrary bs:List<bool>
    definition {iter_dub,iter_times2,dub,from_binary}
    and rewrite IH[bs]
  }
end

theorem iter_times2_pow2: all n:Nat.  iter_times2(n, 1) = pow2(n)
proof
  induction Nat
  case 0 {
    definition {iter_times2,pow2}
  }
  case suc(n') suppose IH {
    definition {iter_times2,pow2}
    and rewrite IH
  }
end

theorem iter_dub_pow2: all n:Nat.
  from_binary(iter_dub(n, to_binary(1))) = pow2(n)
proof
  arbitrary n:Nat
  rewrite symmetric iter_times2_pow2[n]
    | iter_dub_times2[n][to_binary(1)]
    | from_to_binary[1]
end

define log_b : fn List<bool> -> Nat = λbs{ pred(length(bs)) }

theorem dv2_dub: all bs:List<bool>.
  dv2(dub(bs)) = bs
proof
  arbitrary bs:List<bool>
  definition {dub, dv2}
end

theorem iter_dv2_dub: all n:Nat. all bs:List<bool>.
  iter_dv2(n, iter_dub(n, bs)) = bs
proof
  induction Nat
  case 0 {
    arbitrary bs:List<bool>
    definition {iter_dub, iter_dv2}
  }
  case suc(n') suppose IH {
    arbitrary bs:List<bool>
    definition {iter_dub, iter_dv2}
      and rewrite dv2_dub[iter_dub(n',bs)] | IH[bs]
  }
end

theorem from_dub: all bs:List<bool>.
  from_binary(dub(bs)) = 2 * from_binary(bs)
proof
  arbitrary bs:List<bool>
  definition {dub, from_binary}
end

theorem from_dv2: all bs:List<bool>.
  from_binary(dv2(bs)) = div2(from_binary(bs))
proof
  induction List<bool>
  case empty {
    definition {from_binary, dv2, div2, div2_helper}
  }
  case node(b, bs') suppose IH {
    switch b for dv2, from_binary {
      case false {
        rewrite div2_times2[from_binary(bs')]
      }
      case true {
        rewrite div2_suc_times2[from_binary(bs')]
      }
    }
  }
end

theorem blah: all n:Nat.
  length(dub(to_binary(n))) = 1 + length(to_binary(n))
proof
  arbitrary n:Nat
  length_dub[to_binary(n)]
end



/*
theorem log_2n: all n:Nat.
  if not (n = 0)
  then log(n + n) = suc(log(n))
proof
  arbitrary n:Nat
  suppose _
  _definition log
  _rewrite to_binary_add[n][n]
  ?
end
*/

/*
theorem less_pow_log: all n:Nat.
  n < pow2(suc(log(n)))
proof
  induction Nat
  case 0 {
    _definition {pow2, log, to_binary, length, pred, pow2,operator <,operator ≤}
    _definition {operator*,operator*,operator*, operator+}.
  }
  case suc(n') suppose IH {
    _definition {pow2, log, to_binary}
    sorry
  }
end
*/

/*

log(pow2(n))
= log(from_binary(iter_dub(n, to_binary(1))))
= pred(length(to_binary(from_binary(iter_dub(n, to_binary(1))))))
=? pred(length(iter_dub(n, to_binary(1))))
=  pred(suc(n))
= n

*/



