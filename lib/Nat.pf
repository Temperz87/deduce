import Option
import Base

union Nat {
  zero
  suc(Nat)
}

recursive operator +(Nat,Nat) -> Nat {
  operator +(0, m) = m
  operator +(suc(n), m) = suc(n + m)
}

recursive operator *(Nat,Nat) -> Nat {
  operator *(0, m) = 0
  operator *(suc(n), m) = m + (n * m)
}

recursive max(Nat,Nat) -> Nat {
  max(zero, n) = n
  max(suc(m'), n) =
    switch n {
      case zero { suc(m') }
      case suc(n') { suc(max(m',n')) }
    }
}

recursive pred(Nat) -> Nat {
  pred(0) = 0
  pred(suc(n)) = n
}

recursive operator -(Nat,Nat) -> Nat {
  operator -(0, m) = 0
  operator -(suc(n), m) =
    switch m {
      case 0 { suc(n) }
      case suc(m') { n - m' }
    }
}

recursive operator ≤(Nat,Nat) -> bool {
  operator ≤(0, m) = true
  operator ≤(suc(n'), m) =
    switch m {
      case 0 { false }
      case suc(m') { n' ≤ m' }
    }
}

define operator < : fn Nat,Nat -> bool = λ x, y { suc(x) ≤ y }
define operator > : fn Nat,Nat -> bool = λ x, y { y < x }
define operator ≥ : fn Nat,Nat -> bool = λ x, y { y ≤ x }

union Pos {
  one
  succ(Pos)
}

recursive nat2pos(Nat) -> Option<Pos> {
  nat2pos(0) = none
  nat2pos(suc(n')) =
    switch nat2pos(n') {
      case none {
        just(one)
      }
      case just(p) {
        just(succ(p))
      }
    }
}

recursive pos2nat(Pos) -> Nat {
  pos2nat(one) = 1
  pos2nat(succ(p)) = suc(pos2nat(p))
}

recursive find_quotient(Nat,Nat,Pos,Nat) -> Nat {
  find_quotient(0, n, m, q) = q
  find_quotient(suc(u), n, m, q) =
    if suc(q) * pos2nat(m) ≤ n then
      (if n < u * pos2nat(m) then
         find_quotient(u, n, m, suc(q))
       else
         u)
    else
      q
}

recursive operator /(Nat,Pos) -> Nat {
  operator /(0, m) = 0
  operator /(suc(n'), m) =
    find_quotient(suc(suc(n')) * pos2nat(m), suc(n'), m, 0)
}

define operator % = λ n:Nat,m:Pos { n - (n / m) * pos2nat(m) }

recursive summation(Nat, Nat, fn Nat->Nat) -> Nat {
  summation(0, begin, f) = 0
  summation(suc(k), begin, f) = f(begin) + summation(k, suc(begin), f)
}

recursive iterate<T>(Nat, T, fn T -> T) -> T {
  iterate(0, init, f) = init
  iterate(suc(n), init, f) = f(iterate(n, init, f))
}

recursive pow2(Nat) -> Nat {
  pow2(0) = 1
  pow2(suc(n')) = 2 * pow2(n')
}

recursive div2_helper(Nat, bool) -> Nat {
  div2_helper(0, b) = 0
  div2_helper(suc(n'), b) =
    if b then div2_helper(n', not b)
    else suc(div2_helper(n', not b))
}

fun div2(n : Nat) {
  div2_helper(n, true)
}

fun div2_aux(n : Nat) {
  div2_helper(n, false)
}

recursive equal(Nat, Nat) -> bool {
  equal(0, n) =
    switch n {
      case 0 { true }
      case suc(n') { false }
    }
  equal(suc(m'), n) =
    switch n {
      case 0 { false }
      case suc(n') { equal(m', n') }
    }
}

recursive dist(Nat, Nat) -> Nat {
  dist(0, n) = n
  dist(suc(m), n) =
    switch n {
      case 0 {
        suc(m)
      }
      case suc(n') {
        dist(m, n')
      }
    }
}

/*
 Properties of Addition
 */

theorem zero_add: all n:Nat.
  0 + n = n
proof
  arbitrary n:Nat
  conclude 0 + n = n by definition operator+
end

theorem add_zero: all n:Nat.
  n + 0 = n
proof
  induction Nat
  case 0 {
    conclude 0 + 0 = 0   by definition operator+
  }
  case suc(n') suppose IH: n' + 0 = n' {
    equations
      suc(n') + 0 = suc(n' + 0)  by definition operator+
              ... = suc(n')      by replace IH
  }
end

theorem suc_add: all m:Nat, n:Nat.
  suc(m) + n = suc(m + n)
proof
  arbitrary m:Nat, n:Nat
  definition operator+
end

theorem suc_one_add: all n:Nat.
  suc(n) = 1 + n
proof
  arbitrary n:Nat
  equations
    suc(n) =# suc(0 + n) #      by definition operator+
       ... = suc(0) + n         by symmetric suc_add[0, n]
end

theorem one_add_suc: all n:Nat.
  1 + n = suc(n)
proof
  arbitrary n:Nat
  symmetric suc_one_add[n]
end

theorem not_one_add_zero: all n:Nat.
  not (1 + n = 0)
proof
  arbitrary n:Nat
  definition operator+
end

theorem add_suc: all m:Nat. all n:Nat.
  m + suc(n) = suc(m + n)
proof
  enable {operator +}
  induction Nat
  case 0 {
    arbitrary n : Nat
    conclude 0 + suc(n) = suc(0 + n)  by .
  }
  case suc(n') suppose IH {
    arbitrary n : Nat
    equations
      suc(n') + suc(n) = suc(n' + suc(n))  by .
                   ... = suc(suc(n' + n))  by replace IH
                   ... = suc(suc(n') + n)  by .
  }
end

theorem add_commute: all n:Nat. all m:Nat.  n + m = m + n
proof
  enable {operator +}
  induction Nat
  case 0 {
    arbitrary m : Nat
    equations  0 + m = m      by .
                 ... = m + 0  by symmetric add_zero[m]
  }
  case suc(n') suppose IH {
    arbitrary m : Nat
    equations suc(n') + m = suc(n' + m)  by .
                      ... = suc(m + n')  by replace IH
                      ... = m + suc(n')  by symmetric add_suc[m][n']
  }
end

theorem one_add: all m:Nat.  1 + m = suc(m)
proof
  arbitrary m:Nat
  definition 2 * operator+
end

theorem add_one: all m:Nat.  m + 1 = suc(m)
proof
  arbitrary m:Nat
  equations
    m + 1 = 1 + m       by add_commute[m][1]
      ... = suc(m)      by one_add[m]
end

theorem add_assoc: all m:Nat, n:Nat, o:Nat.
  (m + n) + o = m + (n + o)
proof
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    conclude (0 + n) + o = 0 + (n + o)   by evaluate
  }
  case suc(m') suppose IH {
    arbitrary n:Nat, o:Nat
    equations
      (suc(m') + n) + o = suc((m' + n) + o)  by evaluate
                    ... = suc(m' + (n + o))  by replace IH
                    ... = suc(m') + (n + o)  by evaluate
  }
end

associative operator+ in Nat

theorem assoc_add: all m:Nat, n:Nat, o:Nat.
  m + (n + o) = (m + n) + o
proof
  arbitrary m:Nat, n:Nat, o:Nat
  symmetric add_assoc
end

theorem left_cancel: all x:Nat. all y:Nat, z:Nat.
  if x + y = x + z then y = z
proof
  enable {operator +}
  induction Nat
  case 0 {
    arbitrary y:Nat, z:Nat
    suppose prem: 0 + y = 0 + z
    equations   y = 0 + y      by .
              ... = 0 + z      by prem
              ... = z          by .
  }
  case suc(x') suppose IH {
    arbitrary y:Nat, z:Nat
    suppose prem: suc(x') + y = suc(x') + z
    suffices y = z by .
    apply IH[y,z] to
    suffices x' + y = x' + z by .
    injective suc
    conclude suc(x' + y) = suc(x' + z)  by prem
  }
end

theorem add_to_zero: all n:Nat. all m:Nat.
  if n + m = 0
  then n = 0 and m = 0
proof
  induction Nat
  case 0 {
    arbitrary m:Nat
    suppose zmz
    have: m = 0
      by definition operator + in zmz
    replace (recall m = 0)
  }
  case suc(n') suppose IH {
    arbitrary m:Nat
    suppose snmz: suc(n') + m = 0
    conclude false
        by definition operator + in snmz
  }
end

/*
 Properties of Subtraction
 */
 
theorem sub_cancel: all n:Nat. n - n = 0
proof
  induction Nat
  case 0 {
    conclude 0 - 0 = 0   by definition operator-
  }
  case suc(n') assume IH: n' - n' = 0 {
    equations
      suc(n') - suc(n') = n' - n'    by definition operator-
                    ... = 0          by IH
  }
end

theorem sub_zero: all n:Nat.
  n - 0 = n
proof
  induction Nat
  case 0 {
    conclude 0 - 0 = 0   by definition operator-
  }
  case suc(n') suppose IH {
    conclude suc(n') - 0 = suc(n')  by definition operator-
  }
end

/*
 Properties of pred
*/

theorem pred_one: pred(suc(0)) = 0
proof
 definition pred
end

theorem sub_one_pred : all x : Nat. x - 1 = pred(x)
proof
 induction Nat
 case zero {
   definition {pred, operator-}
 }
 case suc(x') {
   definition { pred, operator- }
   and replace sub_zero
 }
end

/*
 Properties of Addition and Subtraction
 */

theorem add_sub_identity: all m:Nat. all n:Nat. 
  (m + n) - m = n
proof
  induction Nat
  case 0 {
    arbitrary n:Nat
    equations   (0 + n) - 0 = n - 0    by replace zero_add
                        ... = n        by sub_zero[n]
  }
  case suc(m') suppose IH {
    arbitrary n:Nat
    equations  (suc(m') + n) - suc(m')
             = suc(m' + n) - suc(m')      by replace suc_add
         ... = (m' + n) - m'              by definition operator-
         ... = n                          by IH[n]
  }
end

theorem sub_sub_eq_sub_add : all x : Nat. all y:Nat. all z:Nat.
  (x - y) - z = x - (y + z)
proof
  induction Nat
  case zero { definition operator- }
  case suc(x') suppose IH{
    arbitrary y :Nat
    switch y {
      case zero {
        arbitrary z : Nat
        replace sub_zero | zero_add
      }
      case suc(y')  {
        arbitrary x : Nat
        switch x {
          case zero {
            replace sub_zero | add_zero
          }
          case suc(z')  {
            suffices  (x' - y') - suc(z') = x' - (y' + suc(z'))
              by definition { operator+, operator- }
            IH[y'][suc(z')]
          }
        }
      }
    }
  }
end

theorem sub_order : all x : Nat, y : Nat, z : Nat.
  (x - y) - z = (x - z) - y
proof
  arbitrary x : Nat, y : Nat, z : Nat
  equations  (x - y) - z = x - (y + z)   by sub_sub_eq_sub_add
                     ... = x - (z + y)   by replace add_commute
                     ... = #(x - z) - y# by replace sub_sub_eq_sub_add
end

/*
 Properties of Multiplication
*/

theorem zero_mult: all n:Nat.
  0 * n = 0
proof
  arbitrary n:Nat
  definition operator*
end
  
theorem mult_zero: all n:Nat.
  n * 0 = 0
proof
  induction Nat
  case 0 {
    conclude 0 * 0 = 0   by definition operator*
  }
  case suc(n') suppose IH {
    equations  suc(n') * 0 = 0 + n' * 0      by definition operator*
                       ... = n' * 0          by zero_add[n'*0]
                       ... = 0               by IH
  }
end

theorem suc_mult: all m:Nat, n:Nat.
  suc(m) * n = n + m * n
proof
  arbitrary m:Nat, n:Nat
  definition operator*
end

theorem mult_suc: all m:Nat. all n:Nat.
  m * suc(n) = m + m * n
proof
  induction Nat
  case 0 {
    arbitrary n:Nat
    equations   0 * suc(n) = 0            by zero_mult[suc(n)]
                       ... = 0 * n        by symmetric zero_mult[n]
                       ... = 0 + 0 * n    by symmetric zero_add[0*n]
  }
  case suc(m') suppose IH: all n:Nat. m' * suc(n) = m' + m' * n {
    arbitrary n:Nat
    suffices suc(n + m' * suc(n)) = suc(m' + (n + m' * n))
        by definition operator* | 2*operator+
    equations   suc(n + m' * suc(n))
              = suc(n + m' + m' * n)       by replace IH
          ... = suc(m' + n + m' * n)       by replace add_commute[n][m']
  }
end

theorem mult_commute: all m:Nat. all n:Nat.
  m * n = n * m
proof
  induction Nat
  case 0 {
    arbitrary n:Nat
    equations    0 * n = 0          by zero_mult[n]
                   ... = n * 0      by symmetric mult_zero[n]
  }
  case suc(m') suppose IH: all n:Nat. m' * n = n * m' {
    arbitrary n:Nat
    equations    suc(m') * n
               = n + m' * n     by definition operator*
           ... = n + (n * m')   by replace IH
           ... = n * suc(m')    by symmetric mult_suc[n][m']
  }
end

theorem one_mult: all n:Nat.
  1 * n = n
proof
  arbitrary n:Nat
  equations     1 * n = n + 0 * n    by suc_mult[0,n]
                  ... = n + 0        by replace zero_mult
                  ... = n            by add_zero[n]
end
  
theorem mult_one: all n:Nat.
  n * 1 = n
proof
  arbitrary n:Nat
  equations    n * 1 = 1 * n    by mult_commute[n][1]
                 ... = n        by one_mult[n]
end

theorem two_mult: all n:Nat.
  2 * n = n + n
proof
  arbitrary n:Nat
  equations   2 * n = n + 1 * n    by suc_mult[1,n]
                ... = n + n        by replace one_mult
end

theorem dist_mult_add:
  all a:Nat. all x:Nat, y:Nat.
  a * (x + y) = a * x + a * y
proof
  induction Nat
  case zero {
    arbitrary x:Nat, y:Nat
    equations   0 * (x + y)
              = 0                     by zero_mult[x+y]
          ... = 0 + 0                 by symmetric add_zero[0]
          ... =# 0 * x + 0 * y #      by replace zero_mult
  }
  case suc(a') suppose IH {
    arbitrary x:Nat, y:Nat
    suffices (x + y) + a' * (x + y) = (x + a' * x) + (y + a' * y)
        by definition operator *
    equations
            (x + y) + a' * (x + y)
          = x + y + a'*x + a'*y           by replace IH
      ... = x + a'*x + y + a'*y           by replace add_commute[y, a'*x]
  }
end

theorem dist_mult_add_right:
  all x:Nat, y:Nat, a:Nat.
  (x + y) * a = x * a + y * a
proof
  arbitrary x:Nat, y:Nat, a:Nat
  equations
  (x + y) * a = a * (x + y)         by replace mult_commute
          ... = a * x + a * y       by dist_mult_add[a][x,y]
          ... = x * a + y * a       by replace mult_commute
end
  
theorem mult_assoc: all m:Nat. all n:Nat, o:Nat.
  (m * n) * o = m * (n * o)
proof
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    equations   (0 * n) * o = 0 * o         by replace zero_mult
                        ... = 0             by zero_mult[o]
                        ... = 0 * (n * o)   by symmetric zero_mult[n*o]
  }
  case suc(m') suppose IH: all n:Nat, o:Nat. (m' * n) * o = m' * (n * o) {
    arbitrary n:Nat, o:Nat
    equations
          (suc(m') * n) * o
        = (n + m' * n) * o          by definition operator*
    ... = n * o + (m' * n) * o      by dist_mult_add_right[n, m'*n, o]
    ... = n * o + m' * (n * o)      by replace IH
    ... =# suc(m') * (n * o) #      by definition operator*
  }
end

associative operator* in Nat

theorem mult_right_cancel : all m : Nat, n : Nat, o : Nat.
  if m * suc(o) = n * suc(o) then m = n
proof
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    switch n {
      case 0 { . }
      case suc(n') {
        assume contra: 0 * suc(o) = suc(n') * suc(o)
        conclude false by evaluate in contra
      }
    }
  }
  case suc(m') assume IH {
    arbitrary n:Nat, o:Nat
    switch n {
      case 0 {
        assume contra: suc(m') * suc(o) = 0 * suc(o)
        conclude false by evaluate in contra
      }
      case suc(n') {
        assume prem: suc(m') * suc(o) = suc(n') * suc(o)
        have prem2: suc(o) + m' * suc(o) = suc(o) + n' * suc(o)
          by definition operator* in prem
        have prem3: m' * suc(o) = n' * suc(o)
          by apply left_cancel to prem2
        have: m' = n' by apply IH to prem3
        conclude suc(m') = suc(n') by replace recall m' = n'
      }
    }
  }
end

theorem mult_left_cancel : all m : Nat, a : Nat, b : Nat.
  if suc(m) * a = suc(m) * b then a = b
proof
  arbitrary m:Nat, a:Nat, b:Nat
  assume prem: suc(m) * a = suc(m) * b
  have prem2: a * suc(m) = b * suc(m)  by rewrite mult_commute in prem
  conclude a = b by apply mult_right_cancel to prem2
end

/*
 Properties of Less-Than, Greater-Than, etc.
*/

theorem suc_less_equal_iff_less_equal_suc: all x:Nat, y:Nat.
  x ≤ y ⇔ suc(x) ≤ suc(y)
proof
  arbitrary x:Nat, y:Nat
  have sle : if x ≤ y then suc(x) ≤ suc(y)
    by suppose prem
      suffices x ≤ y by definition operator≤
      prem
  have els : if suc(x) ≤ suc(y) then x ≤ y
    by suppose prem
      definition operator≤ in prem
  sle, els
end

theorem less_suc_iff_suc_less: all x:Nat, y:Nat.
  x < y ⇔ suc(x) < suc(y)
proof
  arbitrary x:Nat, y:Nat
  have ls : if x < y then suc(x) < suc(y)
    by suppose x_l_y
      suffices suc(x) ≤ y by definition {operator<, operator≤}
      definition operator< in x_l_y
  have sl : if suc(x) < suc(y) then x < y
    by suppose sx_l_sy
      suffices suc(x) ≤ y      by definition operator<
      apply suc_less_equal_iff_less_equal_suc[suc(x), y]
      to definition operator< in sx_l_sy
  ls, sl
end

theorem not_less_zero:
  all x:Nat. not (x < 0)
proof
  definition {operator<, operator≤}
end       

theorem less_equal_implies_less_or_equal:
  all x:Nat. all y:Nat.
  if x ≤ y then x < y or x = y
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    switch y {
      case 0 {
        .
      }
      case suc(y') {
        suppose _
        suffices suc(0) ≤ suc(y')    by definition operator<
        suffices 0 ≤ y'              by definition operator≤
        definition operator≤
      }
    }
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    suppose sx_le_y
    switch y {
      case 0 suppose yz {
        conclude false  by definition operator≤ in replace yz in sx_le_y
      }
      case suc(y') suppose y_sy {
        have: x' ≤ y'
          by definition operator≤ in replace y_sy in sx_le_y
        have: x' < y' or x' = y'
          by IH[y'], recall x' ≤ y'
        cases (recall x' < y' or x' = y')
        case x_l_y {
          have sx_l_sy: suc(x') < suc(y')
            by apply less_suc_iff_suc_less to x_l_y
          conclude (suc(x') < suc(y') or suc(x') = suc(y'))
            by sx_l_sy
        }
        case x_y {
          have sx_sy: suc(x') = suc(y')
            by replace x_y
          conclude (suc(x') < suc(y') or suc(x') = suc(y'))
            by sx_sy
        }
      }
    }
  }
end

theorem less_equal_not_equal_implies_less:
  all x:Nat, y:Nat.
  if x ≤ y and not (x = y) then x < y
proof
  arbitrary x:Nat, y:Nat
  assume prem: x ≤ y and not (x = y)
  have LE: x < y or x = y by apply less_equal_implies_less_or_equal[x,y] to prem
  cases LE
  case less { less }
  case eq { conclude false by apply prem to eq }
end

theorem less_implies_less_equal:
  all x:Nat. all y:Nat.
  if x < y then x ≤ y
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    suppose _
    conclude 0 ≤ y  by definition operator ≤
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    suppose sx_y: suc(x') < y
    have ssx_y: suc(suc(x')) ≤ y  by definition operator < in sx_y
    switch y {
      case zero suppose yz {
        conclude false  by definition operator ≤ in (replace yz in ssx_y)
      }
      case suc(y') suppose EQ : y = suc(y') {
        have ssx_sy: suc(suc(x')) ≤ suc(y')  by replace EQ in ssx_y
        have: x' < y'
            by suffices suc(x') ≤ y'  by definition operator <
               definition operator ≤ in ssx_sy
        suffices suc(x') ≤ suc(y')   by .
        suffices x' ≤ y'   by definition operator ≤          
        IH[y'], recall x' < y'
      }
    }
  }
end

theorem less_equal_refl: all n:Nat. n ≤ n
proof
  enable {operator ≤}
  induction Nat
  case 0 { conclude 0 ≤ 0  by . }
  case suc(n') suppose IH { conclude suc(n') ≤ suc(n')  by IH }
end

theorem equal_implies_less_equal: all x:Nat, y:Nat.
  if x = y then x ≤ y
proof
  arbitrary x:Nat, y:Nat
  suppose x_y
  suffices y ≤ y  by replace x_y
  less_equal_refl[y]
end

theorem less_equal_antisymmetric:
  all x:Nat. all y:Nat. 
  if x ≤ y and y ≤ x
  then x = y
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    suppose zy_yz: 0 ≤ y and y ≤ 0
    switch y {
      case zero { . }
      case suc(y') suppose y_suc {
        have sy_z: suc(y') ≤ 0 by replace y_suc in zy_yz
        conclude false by definition operator ≤ in sy_z
      }
    }
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    suppose sxy_ysx: suc(x') ≤ y and y ≤ suc(x')
    switch y {
      case zero suppose y_z {
        have: suc(x') ≤ 0 by replace y_z in sxy_ysx
        conclude false by definition operator ≤ in (recall suc(x') ≤ 0)
      }
      case suc(y') suppose y_suc {
        enable {operator ≤}
        have: x' ≤ y' by replace y_suc in sxy_ysx
        have: y' ≤ x' by replace y_suc in sxy_ysx
        have: x' = y' by IH[y'], (recall x' ≤ y', y' ≤ x')
        conclude suc(x') = suc(y') by replace (recall x' = y')
      }
    }
  }
end

theorem less_equal_trans: all m:Nat. all n:Nat, o:Nat.
  if m ≤ n and n ≤ o then m ≤ o
proof
  enable {operator ≤}
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    suppose _
    conclude 0 ≤ o  by .
  }
  case suc(m') suppose IH {
    arbitrary n:Nat, o:Nat
    suppose Prem: suc(m') ≤ n and n ≤ o
    have: suc(m') ≤ n  by Prem
    have: n ≤ o  by Prem
    switch n {
      case 0 suppose nz {
        have: suc(m') ≤ 0  by replace nz in (recall suc(m') ≤ n)
        conclude false  by recall suc(m') ≤ 0
      }
      case suc(n') suppose: n = suc(n') {
        have sm_sn: suc(m') ≤ suc(n')
            by replace (recall n = suc(n')) in (recall suc(m') ≤ n)
        have: m' ≤ n'  by sm_sn
        have: suc(n') ≤ o  by replace (recall n = suc(n')) in (recall n ≤ o)
        switch o {
          case 0 suppose: o = 0 {
            have: suc(n') ≤ 0  by replace (recall o = 0) in (recall suc(n') ≤ o)
            conclude false  by recall suc(n') ≤ 0
          }
          case suc(o') suppose os {
            have: suc(n') ≤ suc(o')  by replace os in (recall suc(n') ≤ o)
            have: n' ≤ o'  by recall suc(n') ≤ suc(o')
            conclude m' ≤ o'  by IH[n',o'], recall m' ≤ n', n' ≤ o'
          }
        }
      }
    }
  }
end

theorem not_less_less_equal:
  all x: Nat. all y: Nat.
  if not (x < y) then y ≤ x
proof
  induction Nat
  case zero {
    arbitrary y: Nat
    suppose not_0_y: not (0 < y)
    switch y {
      case zero { definition operator ≤ }
      case suc(y') suppose ys {
        conclude false by apply (replace ys in not_0_y)
                          to (suffices 1 ≤ suc(y')   by definition operator <
                              definition {operator ≤,operator ≤})
      }
    }
  }
  case suc(x') suppose IH {
    arbitrary y: Nat
    suppose not_sx_y: not (suc(x') < y)
    switch y {
      case zero { definition operator ≤ }
      case suc(y') suppose ys {
        have not_x_y: not (x' < y')
          by (suppose x_y: x' < y'
            have sx_sy: suc(x') < suc(y')
              by suffices suc(suc(x')) ≤ suc(y')  by definition operator <
                 suffices suc(x') ≤ y'            by definition operator ≤
                 (definition operator < in x_y)
            have sx_y: suc(x') < y by (suffices suc(x') < suc(y')  by replace ys
                                       sx_sy)
            apply not_sx_y to sx_y)
        suffices y' ≤ x'  by definition operator ≤
        apply IH[y'] to not_x_y
      }
    }
  }
end

theorem less_irreflexive:  all x:Nat. not (x < x)
proof
  induction Nat
  case zero {
    suppose z_l_z: 0 < 0
    enable {operator <, operator ≤}
    conclude false by z_l_z
  }
  case suc(x') suppose IH: not (x' < x') {
    suppose sx_l_sx: suc(x') < suc(x')
    have x_l_x: x' < x' by apply less_suc_iff_suc_less to sx_l_sx
    conclude false by apply IH to x_l_x
  }
end

theorem less_not_equal: all x:Nat, y:Nat.
  if x < y then not (x = y)
proof
  arbitrary x:Nat, y:Nat
  suppose: x < y
  suppose: x = y
  have: y < y by replace (recall x = y) in recall x < y
  have: not (y < y) by less_irreflexive
  conclude false by recall y < y, not (y < y)
end

theorem greater_not_equal: all x:Nat, y:Nat.
  if x > y then not (x = y)
proof
  arbitrary x:Nat, y:Nat
  suppose: x > y
  suppose: x = y
  have: y > y  by replace (recall x = y) in (recall x > y)
  have: y < y  by definition operator> in recall y > y
  have: not (y < y) by less_irreflexive
  conclude false by recall y < y, not (y < y)
end

theorem trichotomy:
  all x:Nat. all y:Nat.
  x < y  or  x = y  or  y < x
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    switch y {
      case zero { conclude 0 = 0 by . }
      case suc(y') {
        conclude 0 < suc(y') by definition operator < | 2 * operator ≤
      }
    }
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    switch y {
      case zero {
        conclude 0 < suc(x')
          by definition operator< | 2 * operator≤
      }
      case suc(y') {
        have IH': (x' < y' or x' = y' or y' < x') by IH[y']
        cases IH'
        case less { conclude suc(x') < suc(y')
            by suffices suc(suc(x')) ≤ suc(y')  by definition operator <
               suffices suc(x') ≤ y'            by definition operator ≤ 
               definition operator < in less
        }
        case x_eq_y { conclude suc(x') = suc(y')  by replace x_eq_y }
        case greater {
          conclude suc(y') < suc(x')
              by suffices suc(suc(y')) ≤ suc(x')   by definition operator <
                 suffices suc(y') ≤ x'             by definition operator ≤
                 definition operator < in greater
        }
      }
    }
  }
end
  
theorem trichotomy2:
  all y:Nat, x:Nat.
  if not (x = y) and not (x < y)
  then y < x
proof
  arbitrary y:Nat, x:Nat
  suppose prem: not (x = y) and not (x < y)
  cases trichotomy[x][y]
  case less: x < y {
    have not_less: not (x < y)  by prem
    conclude false  by apply not_less to less
  }
  case x_eq_y: x = y {
    have not_equal: not (x = y)  by prem
    conclude false  by apply not_equal to x_eq_y
  }
  case greater: y < x {
    conclude y <  x by greater
  }
end

theorem positive_1_and_2: 0 ≤ 1 and 0 ≤ 2
proof
  have one_pos: 0 ≤ 1 by definition operator ≤
  have two_pos: 0 ≤ 2 by definition operator ≤
  conclude 0 ≤ 1 and 0 ≤ 2 by one_pos, two_pos
end

theorem positive_2: 0 ≤ 2
proof
  conclude 0 ≤ 2 by positive_1_and_2
end

theorem dichotomy:  all x:Nat, y:Nat.  x ≤ y  or  y < x
proof
  arbitrary x:Nat, y:Nat
  have tri: x < y or x = y or y < x by trichotomy[x][y]
  cases tri
  case x_l_y: x < y {
    have x_le_y: x ≤ y by apply less_implies_less_equal[x][y] to x_l_y
    conclude x ≤ y or y < x by x_le_y
  }
  case x_eq_y: x = y {
    have x_le_y: x ≤ y by suffices y ≤ y  by replace x_eq_y
                          less_equal_refl[y]
    conclude x ≤ y or y < x by x_le_y
  }
  case y_l_x: y < x {
    conclude x ≤ y or y < x by y_l_x
  }
end

theorem zero_or_positive: all x:Nat. x = 0 or 0 < x
proof
  arbitrary x:Nat
  switch x {
    case zero {
      conclude true or 0 < 0 by .
    }
    case suc(x') {
      have z_l_sx: 0 < suc(x')
          by definition operator < | 2 * operator ≤
      conclude suc(x') = 0 or 0 < suc(x') by z_l_sx
    }
  }
end

theorem zero_le_zero: all x:Nat. if x ≤ 0 then x = 0
proof
  induction Nat
  case zero {
    suppose _
    .
  }
  case suc(x') {
    suppose prem: suc(x') ≤ 0
    conclude false by definition operator ≤ in prem
  }
end

theorem not_less_equal_iff_greater:
  all x:Nat, y:Nat.
  not (x ≤ y) ⇔ (y < x)
proof
  arbitrary x:Nat, y:Nat
  have nle_g : if not (x ≤ y) then y < x
    by suppose not_xy
    cases dichotomy[x,y]
    case x_le_y { apply not_xy to x_le_y }
    case y_l_x { y_l_x }
  have g_nle : if y < x then not (x ≤ y) 
    by suppose ylx
      have y_le_x : y ≤ x by apply less_implies_less_equal to ylx
      suppose label : x ≤ y
      have xy_a_yx : x ≤ y and y ≤ x by y_le_x, label
      have y_e_x:  y=x by symmetric (apply less_equal_antisymmetric to xy_a_yx)
      have x_ne_y: not (y = x) by apply less_not_equal to ylx
      replace y_e_x in x_ne_y
  nle_g, g_nle
end


theorem less_implies_not_greater:
  all x:Nat. all y:Nat.
  if x < y then not (y < x)
proof
  induction Nat
  case zero {
    arbitrary y:Nat
    suppose zero_less_y
    suppose y_less_zero
    conclude false by (definition {operator <, operator ≤} in y_less_zero)
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    suppose sx_less_y
    suppose y_less_sx
    switch y {
      case zero suppose y_eq_zero {
        conclude false by (definition {operator <, operator ≤} in
                       (replace y_eq_zero in sx_less_y))
      }
      case suc(y') suppose ys {
        enable {operator<,operator≤}
        have x_less_y: x' < y'  by replace ys in sx_less_y
        have y_less_x: y' < x'  by replace ys in y_less_sx
        conclude false by apply (apply IH[y'] to x_less_y) to y_less_x
      }
    }
  }
end

theorem not_less_equal_less_equal:
  all x:Nat, y:Nat.
  if not (x ≤ y) then y ≤ x
proof
  arbitrary x:Nat, y:Nat
  suppose not_xy
  have y_l_x: y < x  by apply not_less_equal_iff_greater to not_xy
  apply less_implies_less_equal to y_l_x
end

theorem not_zero_suc: all n:Nat.
  if not (n = 0)
  then some n':Nat. n = suc(n')
proof
  arbitrary n:Nat
  switch n {
    case 0 { . }
    case suc(n') {
      choose n'.
    }
  }
end

theorem positive_suc: all n:Nat.
  if 0 < n
  then some n':Nat. n = suc(n')
proof
  arbitrary n:Nat
  switch n {
    case 0 {
      suppose z_l_z: 0 < 0
      conclude false  by definition {operator<, operator≤} in z_l_z
    }
    case suc(n') {
      suppose z_l_sn: 0 < suc(n')
      choose n'.
    }
  }
end

/*
 Properties of Less-Than and Addition
 */

theorem less_equal_add: all x:Nat. all y:Nat.
  x ≤ x + y
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    conclude 0 ≤ 0 + y  by definition operator ≤
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    suffices x' ≤ x' + y   by definition {operator +, operator ≤}
    IH[y]
  }
end

theorem less_equal_add_left: all x:Nat, y:Nat.
  y ≤ x + y
proof
  arbitrary x:Nat, y:Nat
  suffices y ≤ y + x   by replace add_commute
  less_equal_add[y][x]
end

theorem less_equal_suc: all n:Nat.
  n ≤ suc(n)
proof
  arbitrary n:Nat
  definition 2 * operator+ in
  replace add_commute in
  less_equal_add[n][1]
end

theorem less_trans: all m:Nat, n:Nat, o:Nat.
  if m < n and n < o then m < o
proof
  arbitrary m:Nat, n:Nat, o:Nat
  suppose prem
  suffices suc(m) ≤ o   by definition operator <
  have _5: suc(m) ≤ suc(suc(m))
     by less_equal_suc[suc(m)]
  have _3: suc(suc(m)) ≤ suc(n) by
     suffices suc(m) ≤ n by definition operator≤
     definition operator < in prem
  have _2: suc(n) ≤ o   by definition operator < in prem
  have _4: suc(suc(m)) ≤ o
     by apply less_equal_trans to (_3, _2)
  conclude suc(m) ≤ o
     by apply less_equal_trans to (_5, _4)
end

theorem less_one_add: all n:Nat.
  0 < 1 + n
proof
  arbitrary n:Nat
  definition {operator<, operator≤, operator+, operator≤}
end

theorem greater_any_zero: all x:Nat, y:Nat.
  if x < y
  then 0 < y
proof
  arbitrary x:Nat, y:Nat
  suppose x_l_y
  suffices 1 ≤ y  by definition operator<
  have sx_le_y: 1 + x ≤ y  by
    suffices suc(x) ≤ y  by definition 2*operator+
    definition operator< in x_l_y
  have one_le_sx: 1 ≤ 1 + x
    by less_equal_add[1][x]
  apply less_equal_trans to (one_le_sx, sx_le_y)
end

theorem less_equal_left_cancel: all x:Nat. all y:Nat, z:Nat.
  x + y ≤ x + z ⇔ y ≤ z
proof
  induction Nat
  case 0 {
    definition operator+
  }
  case suc(x') suppose IH {
    suffices (all y:Nat, z:Nat. (x' + y ≤ x' + z ⇔ y ≤ z))
      by definition {operator+, operator≤}
    IH
  }
end

theorem less_left_cancel: all x:Nat, y:Nat, z:Nat.
  x + y < x + z ⇔ y < z
proof
  arbitrary x:Nat, y:Nat, z:Nat
  suffices suc(x + y) ≤ x + z ⇔ suc(y) ≤ z by definition operator<
  suffices (x + suc(y) ≤ x + z ⇔ suc(y) ≤ z) 
    by replace add_commute[x][y]
             | symmetric (definition operator+ in add_commute[x][suc(y)])
  less_equal_left_cancel[x][suc(y), z]
end

// TODO: I stole this name from agda,
// but it isn't very good
// maybe mult_less_equal_left_cancel?
theorem mult_mono_le : all n : Nat. all x : Nat, y : Nat.
  if x ≤ y then n * x ≤ n * y
proof
  induction Nat
  case zero {
    definition {operator*, operator≤}
  }
  case suc(n') suppose IH {
    arbitrary x:Nat, y:Nat
    suppose prem : x ≤ y
    suffices x + n' * x ≤ y + n' * y by definition operator*
    have nx_le_ny : n' * x ≤ n' * y by apply IH to prem
    have nyx_le_nyy : n' * y + x ≤ n' * y + y 
      by apply less_equal_left_cancel[n'*y][x, y] to prem
    have xny_le_yny : x + n' * y ≤ y + n' * y
      by replace add_commute[n'*y][x]
               | add_commute[n'*y][y]
               in nyx_le_nyy
    have xnx_le_xny : x + n' * x ≤ x + n' * y
      by apply less_equal_left_cancel[x][n'*x, n'*y] to nx_le_ny
    apply less_equal_trans to xnx_le_xny, xny_le_yny
  }
end

/*
 Properties of Less-Than, Addition, and Subtraction
 */

theorem sub_add_assoc: all n:Nat. all l:Nat,m:Nat.
  if m ≤ n
  then l + (n - m) = (l + n) - m
proof
  induction Nat
  case 0 {
    arbitrary l:Nat, m:Nat
    suppose m_le_z: m ≤ 0
    suffices l + 0 = (l + 0) - m    by definition operator-
    suffices l = l - m              by replace add_zero
    have m_z: m = 0 by apply zero_le_zero to m_le_z
    replace m_z | sub_zero[l]
  }
  case suc(n') suppose IH {
    arbitrary l:Nat, m:Nat
    suppose m_le_sn
    switch m {
      case 0 {
        suffices l + suc(n') = (l + suc(n')) - 0  by definition {operator-}
        replace sub_zero
      }
      case suc(m') suppose m_sm {
        suffices l + (n' - m') = (l + suc(n')) - suc(m')
             by definition {operator-}
        suffices l + (n' - m') = suc(l + n') - suc(m')
             by replace add_suc
        suffices l + (n' - m') = (l + n') - m'
             by definition operator-
        have m_n: m' ≤ n'
          by definition operator ≤ in replace m_sm in m_le_sn
        apply IH[l, m'] to m_n
      }
    }
  }
end

theorem sub_suc_identity: all n:Nat.
   if 0 < n then suc(n - 1) = n
proof
   arbitrary n:Nat
   assume: 0 < n
   have X: 1 + (n - 1) = (1 + n) - 1 by apply sub_add_assoc[n,1,1] to definition operator< in recall 0 < n
   have Y: (1 + n) - 1 = n by add_sub_identity
   equations
     suc(n - 1) = #1 + (n - 1)# by definition 2*operator+
            ... = (1 + n) - 1   by apply sub_add_assoc[n,1,1] to definition operator< in recall 0 < n
            ... = n             by add_sub_identity
end

theorem sub_add_identity: all n:Nat. all m:Nat.
  if m ≤ n
  then m + (n - m) = n
proof
  induction Nat
  case 0 {
    arbitrary m:Nat
    suppose m_le_z
    suffices m + (0 - m) = 0  by .
    have m_z: m = 0 by apply zero_le_zero to m_le_z
    suffices 0 + (0 - 0) = 0   by replace m_z
    definition {operator-, operator+}
  }
  case suc(n') suppose IH {
    arbitrary m:Nat
    suppose m_le_sn
    suffices m + (suc(n') - m) = suc(n')  by .
    switch m {
      case 0 {
        conclude 0 + (suc(n') - 0) = suc(n') by definition {operator-,operator+}
      }
      case suc(m') suppose m_sm {
        suffices suc(m') + (suc(n') - suc(m')) = suc(n')  by .
        suffices suc(m' + (n' - m')) = suc(n')
          by definition {operator-,operator+}
        have m_n: m' ≤ n'  by definition operator≤ in replace m_sm in m_le_sn
        have IH_m: m' + (n' - m') = n' by apply IH[m'] to m_n
        replace IH_m
      }
    }
  }
end

theorem less_equal_add_sub: all m:Nat. all n:Nat, o:Nat.
  if n ≤ m and m ≤ n + o
  then m - n ≤ o
proof
  induction Nat
  case 0 {
    arbitrary n:Nat, o:Nat
    suppose prem
    definition {operator -, operator ≤}
  }
  case suc(m') suppose IH {
    arbitrary n:Nat, o:Nat
    suppose prem
    switch n {
      case 0 suppose n_z {
        suffices suc(m') ≤ o  by definition operator -
        conclude suc(m') ≤ o
          by definition operator+ in replace n_z in prem
      }
      case suc(n') suppose n_sn {
        suffices m' - n' ≤ o  by definition operator-
        have n_m: n' ≤ m'
          by definition operator ≤ in replace n_sn
             in conjunct 0 of prem
        have m_no: m' ≤ n' + o
          by definition {operator ≤, operator +} in replace n_sn in 
             conjunct 1 of prem
        conclude m' - n' ≤ o  by apply IH[n',o] to n_m, m_no
      }
    }
  }
end

theorem sub_zero_iff_less_eq : all x : Nat, y : Nat. x ≤ y ⇔ x - y = 0
proof
  induction Nat 
  case 0 {
    conclude all y : Nat. 0 ≤ y ⇔ 0 - y = 0
      by definition {operator≤, operator-}
  }
  case suc(x') suppose IH {
    arbitrary y : Nat
    switch y {
      case 0 {
        suffices not (suc(x') ≤ 0) by definition operator-
        assume sx_le_z
        apply zero_le_zero[suc(x')] to sx_le_z
      }
      case suc(y') {
        suffices x' ≤ y' ⇔ x' - y' = 0
          by definition  {operator≤, operator-}
        IH[y']
      }
    }
  }
end

theorem sub_pos_iff_less: all x: Nat, y:Nat. y < x ⇔ 0 < x - y
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    have fwd: if y < 0 then 0 < 0 - y by
        definition {operator<, operator≤}
    have bkwd: if 0 < 0 - y then y < 0 by
        definition {operator-, operator<, operator≤}
    fwd, bkwd
  }
  case suc(x') assume IH {
    arbitrary y:Nat
    switch y {
      case 0 {
        have fwd: if 0 < suc(x') then 0 < suc(x') - 0
            by assume _ definition operator- | operator< | 2* operator≤
        have bkwd: if 0 < suc(x') - 0 then 0 < suc(x')
            by assume _ definition operator< | 2*operator≤
        fwd, bkwd
      }
      case suc(y') {
        have IH': y' < x' ⇔ 0 < x' - y' by IH[y']
        suffices suc(y') < suc(x') ⇔ 0 < x' - y' by definition operator-
        have syx_yx: suc(y') < suc(x') ⇔ y' < x'
            by apply iff_symm[y' < x',suc(y') < suc(x')] to less_suc_iff_suc_less[y',x']
        apply iff_trans[suc(y') < suc(x'), y' < x', 0 < x' - y']
        to syx_yx, IH'
      }
    }
  }
end

// NOTE: This has to be after dichotomy, so it can't be with the other mult theorems
theorem dist_mult_sub : all x : Nat. all y : Nat, z : Nat.
  x * (y - z) = x * y - x * z
proof
  induction Nat
  case zero {
    arbitrary y:Nat, z:Nat
    suffices 0 = 0 - 0   by replace zero_mult
    definition operator-
  }
  case suc(n') suppose IH {
    arbitrary y:Nat, z:Nat
    suffices (n' * y - n' * z) + (y - z) = (y + n' * y) - (z + n' * z) 
      by definition operator*
         and replace IH | add_commute[(y - z)][(n' * y - n' * z)]
    cases dichotomy[z, y]
    case z_le_y: z ≤ y {
      have nz_le_ny : n'*z ≤n' * y
        by apply mult_mono_le[n'][z, y] to z_le_y
      replace apply sub_add_assoc[y][(n' * y - n' * z) ,z] to z_le_y
            | add_commute[(n' * y - n' * z)][y]
            | apply sub_add_assoc[n'*y][y, n'*z] to nz_le_ny
            | sub_sub_eq_sub_add[(y + n' * y)][n' * z][z]
            | add_commute[n' * z][z]
    }
    case ylz: y < z {
      have y_le_z: y ≤ z by apply less_implies_less_equal[y][z] to ylz
      have ny_le_nz: n' * y ≤ n' * z by apply mult_mono_le[n'][y, z] to y_le_z
      have zny_le_znz : z + n' * y ≤ z + n' * z by apply less_equal_left_cancel[z][n'*y, n'*z] to ny_le_nz
      have nyy_le_nyz: n' * y + y ≤ n' * y + z by apply less_equal_left_cancel[n' *y][y, z] to y_le_z
      have yny_le_zny : y + n' * y ≤ z + n' * y 
        by replace add_commute in nyy_le_nyz
      have yny_le_znz: y + n'*y ≤ z + n'*z
        by apply less_equal_trans[y + n' * y][z + n' * y,z + n' * z] to yny_le_zny, zny_le_znz
      suffices 0+0=0 
        by replace apply sub_zero_iff_less_eq[y][z] to y_le_z
                 | apply sub_zero_iff_less_eq[n'*y][n'*z] to ny_le_nz
                 | apply sub_zero_iff_less_eq[y+n'*y][z+n'*z] to yny_le_znz
      add_zero[0]
    } 
  }
end

/*
  Properties of max
  */

lemma max_same: all x:Nat. max(x,x) = x
proof
  induction Nat
  case 0 {
    conclude max(0, 0) = 0  by definition max
  }
  case suc(x') suppose IH {
    suffices suc(max(x', x')) = suc(x')
      by definition max
    conclude suc(max(x', x')) = suc(x') by replace IH
  }
end

lemma max_suc: all x:Nat. max(suc(x), x) = suc(max(x,x))
proof
  induction Nat
  case zero {
    conclude max(suc(0), 0) = suc(max(0,0))  by definition max
  }
  case suc(x') suppose IH {
    equations
    # max(suc(suc(x')),suc(x')) #= suc(max(suc(x'),x'))
                                          by definition max
    ... = suc(suc(max(x',x')))            by replace IH
    ... =# suc(max(suc(x'),suc(x'))) #    by definition max
  }
end

lemma max_suc2: all x:Nat, y:Nat. max(suc(x), suc(y)) = suc(max(x,y))
proof
  arbitrary x:Nat, y:Nat
  switch x {
    case 0 {
      conclude max(1,suc(y)) = suc(max(0,y))   by definition 2*max
    }
    case suc(x') {
      switch y {
        case 0 {
          definition 2*max
        }
        case suc(y') {
          definition 2*max
        }
      }
    }
  }
end

theorem max_greater_right: all y:Nat, x:Nat. 
  y ≤ max(x, y)
proof
  induction Nat
  case 0 {
    arbitrary x:Nat
    definition operator ≤
  }
  case suc(y') suppose IH {
    arbitrary x:Nat
    switch x {
      case 0 {
        suffices suc(y') ≤ suc(y')  by definition max
        less_equal_refl[suc(y')]
      }
      case suc(x') {
        suffices suc(y') ≤ suc(max(x',y'))  by replace max_suc2
        suffices y' ≤ max(x',y')  by definition operator ≤
        IH[x']
      }
    }
  }
end

theorem max_greater_left: all x:Nat, y:Nat. 
  x ≤ max(x, y)
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    definition operator ≤
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    switch y {
      case 0 {
        suffices suc(x') ≤ suc(x')  by definition max
        conclude suc(x') ≤ suc(x')  by less_equal_refl[suc(x')]
      }
      case suc(y') {
        suffices x' ≤ max(x',y')  by definition max | operator ≤
        IH[y']
      }
    }
  }
end

theorem max_is_left_or_right: all x:Nat, y:Nat.
  max(x, y) = x or max(x, y) = y
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    definition max
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    switch y {
      case 0 {
        definition max
      }
      case suc(y') {
        cases IH[y']
        case m_x: max(x',y') = x' {
          suffices suc(max(x',y')) = suc(x')   by definition max
          replace m_x
        }
        case m_y: max(x',y') = y' {
          suffices suc(max(x',y')) = suc(y')   by definition max
          replace m_y
        }
      }
    }
  }
end

theorem zero_max: all x:Nat.
  max(0, x) = x
proof
  definition max
end

theorem max_zero: all x:Nat.
  max(x, 0) = x
proof
  induction Nat
  case 0 {
    conclude max(0, 0) = 0  by definition max
  }
  case suc(x') suppose IH {
    conclude max(suc(x'), 0) = suc(x')  by definition max
  }
end

theorem max_symmetric:  all x:Nat, y:Nat.
  max(x,y) = max(y,x)
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    suffices y = max(y, 0)  by definition max
    replace max_zero
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    switch y {
      case 0 {
        conclude max(suc(x'), 0) = max(0, suc(x'))
          by definition max
      }
      case suc(y') suppose y_suc {
        suffices suc(max(x', y')) = suc(max(y', x'))
            by replace max_suc2
        replace IH
      }
    }
  }
end

theorem max_assoc: all x:Nat, y:Nat,z:Nat.
  max(max(x, y), z) = max(x, max(y, z))
proof
  induction Nat
  case 0 {
    arbitrary y:Nat,z:Nat
    conclude max(max(0, y), z) = max(0, max(y, z))
        by definition max
  }
  case suc(x') suppose IH {
    arbitrary y:Nat,z:Nat
    switch y {
      case 0 {
        conclude max(max(suc(x'), 0), z) = max(suc(x'), max(0, z))
          by definition max
      }
      case suc(y') suppose y_suc {
        switch z {
          case 0 {
            conclude max(max(suc(x'), suc(y')), 0) = max(suc(x'), max(suc(y'), 0))
                by definition max
          }
          case suc(z') suppose z_suc {
            suffices suc(max(max(x', y'), z')) = suc(max(x', max(y', z')))
               by definition max
            replace IH
          }
        }
      }
    }
  }
end

theorem max_equal_greater_right: all x:Nat, y:Nat.
  if x ≤ y
  then max(x, y) = y
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    suppose _
    conclude max(0, y) = y   by definition max
  }
  case suc(x') suppose IH {
    arbitrary y:Nat
    suppose sx_le_y
    switch y for max {
      case 0 suppose y_z {
        conclude false  by definition operator≤ in
                           replace y_z in sx_le_y
      }
      case suc(y') suppose y_suc {
        have x_l_y: x' ≤ y'
            by definition operator≤ in replace y_suc in sx_le_y
        conclude suc(max(x', y')) = suc(y')
            by replace apply IH to x_l_y
      }
    }
  }
end

theorem max_equal_greater_left: all x:Nat, y:Nat.
  if y ≤ x
  then max(x, y) = x
proof
  arbitrary x:Nat
  arbitrary y:Nat
  suppose prem
  suffices max(y, x) = x   by replace max_symmetric
  apply max_equal_greater_right to prem
end

theorem max_less_equal: all x:Nat, y:Nat, z:Nat.
  if x ≤ z
  and y ≤ z
  then max(x, y) ≤ z
proof
  induction Nat
  case 0 {
    arbitrary y:Nat, z:Nat
    suppose prem
    suffices y ≤ z  by definition max
    prem
  }
  case suc(x') suppose IH {
    arbitrary y:Nat, z:Nat
    suppose prem
    switch y for max {
      case 0 {
        conclude suc(x') ≤ z by prem
      }
      case suc(y') suppose y_suc {
        suffices suc(max(x', y')) ≤ z   by .
        switch z {
          case 0 suppose z_zero {
            conclude false
                by definition operator≤ in
                   replace z_zero in prem
          }
          case suc(z') suppose z_suc {
            suffices max(x', y') ≤ z'  by definition operator≤
            have x_le_z: x' ≤ z' by
                definition operator≤ in replace z_suc in prem
            have y_le_z: y' ≤ z' by
                definition operator≤ in
                replace y_suc | z_suc in prem
            apply IH to x_le_z, y_le_z
          }
        }
      }
    }
  }
end


/*
 Odd and Even Numbers
 */

recursive parity(Nat, bool) -> bool {
  parity(0, b) = b
  parity(suc(n'), b) = parity(n', not b)
}

fun is_even(n : Nat) {
  parity(n, true)
}

fun is_odd(n : Nat) {
  parity(n, false)
}


define Even : fn Nat -> bool = λ n { some m:Nat. n = 2 * m }
define Odd : fn Nat -> bool = λ n { some m:Nat. n = suc (2 * m) }

theorem even_or_odd: all n:Nat. is_even(n) or is_odd(n)
proof
  induction Nat
  case 0 {
    conclude is_even(0) by definition {is_even, parity}
  }
  case suc(n') assume IH {
    cases IH
    case even {
      conclude is_odd(suc(n')) by
        suffices parity(n', true) by definition {is_odd, parity}
        definition is_even in even
    }
    case odd {
      conclude is_even(suc(n')) by
        suffices parity(n', false) by definition {is_even, parity}
        definition is_odd in odd
    }
  }
end


theorem addition_of_evens:
  all x:Nat, y:Nat.
  if Even(x) and Even(y) then Even(x + y)
proof
  arbitrary x:Nat, y:Nat
  suppose even_xy: Even(x) and Even(y)
  have even_x: some m:Nat. x = 2 * m by definition Even in even_xy
  have even_y: some m:Nat. y = 2 * m by definition Even in even_xy
  obtain a where x_2a: x = 2*a from even_x
  obtain b where y_2b: y = 2*b from even_y
  suffices some m:Nat. x + y = 2 * m  by definition Even
  choose a + b
  equations
        x + y
      = 2*a + 2*b       by replace x_2a | y_2b
  ... = #2 * (a + b)#   by replace dist_mult_add
end

theorem is_even_odd:
  all n:Nat.
  (if is_even(n) then Even(n))
  and (if is_odd(n) then Odd(n))
proof
  induction Nat
  case zero {
    have part1: if is_even(0) then Even(0)
      by suppose _
         conclude Even(0)
         by suffices some m:Nat. 0 = 2 * m  by definition Even
            choose 0
            evaluate
   have part2: if is_odd(0) then Odd(0)
     by suppose zero_odd
        conclude false by definition {is_odd, parity} in zero_odd
    part1, part2
  }
  case suc(n') suppose IH {
    have part1: (if is_even(suc(n')) then Even(suc(n'))) by
      (suppose suc_even: is_even(suc(n'))
      have odd_n: is_odd(n') by {
        suffices parity(n', false) by definition {is_odd}
        definition {is_even, parity} in suc_even
      }
      have Odd_n: Odd(n') by apply (conjunct 1 of IH) to odd_n
      obtain m where n_2m from definition Odd in Odd_n
      suffices some m':Nat. suc(n') = 2 * m'  by definition Even
      choose suc(m)
      suffices suc(suc(2 * m)) = 2 * suc(m)  by replace n_2m
      suffices suc(suc(m + (m + 0))) = suc(m + suc(m + 0))
          by definition 3 * operator* | 3 * operator+
      replace add_zero | add_suc)
    have part2: (if is_odd(suc(n')) then Odd(suc(n'))) by
      (suppose suc_odd: is_odd(suc(n'))
        have even_n: is_even(n') by {
          suffices parity(n', true) by definition is_even
          definition {is_odd, parity} in suc_odd
        }
        have Even_n: Even(n') by apply (conjunct 0 of IH) to even_n
        obtain m where n_2m from definition Even in Even_n
        suffices some m':Nat. suc(n') = suc(2 * m')  by definition Odd
        choose m
        replace n_2m)
    part1, part2
  }
end

theorem Even_or_Odd: all n:Nat. Even(n) or Odd(n)
proof
  arbitrary n:Nat
  cases even_or_odd[n]
  case even {
    conclude Even(n) by apply is_even_odd to even
  }
  case odd {
    conclude Odd(n) by apply is_even_odd to odd
  }
end

/*
 Properties of Summation
 */

theorem summation_cong: all k : Nat. all f : fn Nat->Nat, g : fn Nat->Nat, s : Nat, t : Nat. 
  if (all i:Nat. if i < k then f(s + i) = g(t + i))
  then summation(k, s, f) = summation(k, t, g)
proof
  induction Nat
  case zero {
    arbitrary f:fn(Nat) -> Nat,g:fn(Nat) -> Nat,s:Nat,t:Nat
    suppose f_g
    definition summation
  }
  case suc(k') suppose IH {
    arbitrary f:fn(Nat) -> Nat,g:fn(Nat) -> Nat,s:Nat,t:Nat
    suppose f_g
    suffices summation(suc(k'),s,f) = summation(suc(k'),t,g)  by .
    suffices f(s) + summation(k',suc(s),f) = g(t) + summation(k',suc(t),g)
      by definition summation
    have f_g_s: f(s) = g(t) by
       replace add_zero in
       (apply f_g[0] to definition operator < | 2* operator ≤)
    have IH': summation(k',suc(s),f) = summation(k',suc(t),g)
      by apply IH[f,g,suc(s),suc(t)] 
         to arbitrary i:Nat suppose i_k: i < k'
            suffices f(suc(s) + i) = g(suc(t) + i)  by .
            have fsi_gtsi: f(s + suc(i)) = g(t + suc(i))
              by apply f_g[suc(i)] to
                 enable {operator <, operator ≤, operator ≤} i_k
            enable {operator +} replace add_suc in fsi_gtsi
    replace f_g_s | IH'
  }
end

lemma summation_cong4: all k:Nat. all f : fn Nat->Nat, g : fn Nat->Nat, s :Nat. 
  if (all i:Nat. if s ≤ i and i < s + k then f(i) = g(i))
  then summation(k, s, f) = summation(k, s, g)
proof
  induction Nat
  case zero {
    arbitrary f : fn Nat->Nat, g : fn Nat->Nat, s :Nat
    suppose _
    definition summation
  }
  case suc(k') suppose IH {
    arbitrary f : fn Nat->Nat, g : fn Nat->Nat, s :Nat
    suppose f_g: all i:Nat. if s ≤ i and i < s + suc(k') then f(i) = g(i)
    suffices f(s) + summation(k',suc(s),f) = g(s) + summation(k',suc(s),g)
        by definition summation
    have f_g_s: f(s) = g(s) by
        (have s_s: s ≤ s by less_equal_refl[s]
         have s_sk: s < s + suc(k') by (enable {operator <,operator ≤}
                                        suffices s ≤ s + k'    by replace add_suc
                                        less_equal_add[s][k'])
         apply f_g[s] to s_s, s_sk)
    have IH': summation(k',suc(s),f) = summation(k',suc(s),g)
                  by apply IH[f,g,suc(s)] to (arbitrary i:Nat suppose ss_i_and_i_ss_k
                                              have s_i: s ≤ i by
                                                 apply less_implies_less_equal[s][i]
                                                 to suffices suc(s) ≤ i  by definition operator <
                                                    ss_i_and_i_ss_k
                                              have i_s_k: i < s + suc(k') by
                                                 enable {operator <, operator +}
                                                 suffices suc(i) ≤ suc(s + k')  by replace add_suc
                                                 (conjunct 1 of ss_i_and_i_ss_k)
                                              conclude f(i) = g(i) by apply f_g[i] to s_i, i_s_k)
    replace f_g_s | IH'
  }
end

theorem summation_suc: all k:Nat. all f : fn Nat->Nat, g : fn Nat->Nat, s :Nat. 
  if (all i:Nat. f(i) = g(suc(i)))
  then summation(k, s, f) = summation(k, suc(s), g)
proof
  arbitrary k:Nat
  arbitrary f : fn Nat->Nat, g : fn Nat->Nat, s :Nat
  suppose prem
  have sum_prem: (all i:Nat. (if i < k then f(s + i) = g(suc(s) + i))) by
      arbitrary i:Nat
      suppose i_less_k
      suffices f(s+i) = g(suc(s+i))  by definition operator+
      prem[s+i]
  apply summation_cong[k][f, g, s, suc(s)] to sum_prem
end

lemma summation_cong3: all k:Nat. all f : fn Nat->Nat, g : fn Nat->Nat, s :Nat, t :Nat. 
  if (all i:Nat. f(s + i) = g(t + i))
  then summation(k, s, f) = summation(k, t, g)
proof
  induction Nat
  case zero {
    arbitrary f : fn Nat->Nat, g : fn Nat->Nat, s :Nat, t :Nat
    suppose _
    definition summation
  }
  case suc(k') suppose IH {
    arbitrary f : fn Nat->Nat, g : fn Nat->Nat, s :Nat, t :Nat
    suppose f_g: all i:Nat. f(s + i) = g(t + i)
    suffices f(s) + summation(k',suc(s),f) = g(t) + summation(k',suc(t),g)  by definition summation
    have fs_gt: f(s) = g(t)   by replace add_zero in f_g[0]
    have all_f_g: all i:Nat. f(suc(s) + i) = g(suc(t) + i)
      by arbitrary i:Nat
         suffices f(suc(s + i)) = g(suc(t + i))  by definition operator +
         replace add_suc in f_g[suc(i)]
    equations
          f(s) + summation(k',suc(s),f)
        = g(t) + summation(k',suc(s),f)   by replace fs_gt
    ... = g(t) + summation(k',suc(t),g)   by replace (apply IH[f,g,suc(s),suc(t)] to all_f_g)
  }
end

theorem summation_add:
  all a:Nat. all b:Nat, s:Nat, t:Nat, f:fn Nat->Nat, g:fn Nat->Nat, h:fn Nat->Nat.
  if (all i:Nat. if i < a then g(s + i) = f(s + i))
  and (all i:Nat. if i < b then h(t + i) = f(s + a + i))
  then summation(a + b, s, f) = summation(a, s, g) + summation(b, t, h)
proof
  induction Nat
  case zero {
    arbitrary b:Nat, s:Nat, t:Nat, f:fn Nat->Nat, g:fn Nat->Nat, h:fn Nat->Nat
    suppose g_f_and_h_f
    enable {operator +}
    suffices summation(b,s,f) = summation(b,t,h)  by definition summation
    apply summation_cong[b][f,h,s,t]
    to arbitrary i:Nat
       suppose i_b: i < b
       conclude f(s + i) = h(t + i)
       by symmetric (apply (conjunct 1 of g_f_and_h_f)[i] to i_b)
  }
  case suc(a') suppose IH {
    arbitrary b:Nat, s:Nat, t:Nat, f:fn Nat->Nat, g:fn Nat->Nat, h:fn Nat->Nat
    suppose g_f_and_h_f
    suffices f(s) + summation(a' + b,suc(s),f) = (g(s) + summation(a',suc(s),g)) + summation(b,t,h)
        by definition {operator +, summation}
    have fs_gs: f(s) = g(s) by symmetric
        replace add_zero
        in apply (conjunct 0 of g_f_and_h_f)[0]
           to definition operator < | 2* operator ≤
    have IH': summation(a' + b,suc(s),f)
            = summation(a',suc(s),g) + summation(b,t,h)
      by have p1: all i:Nat. (if i < a' then g(suc(s) + i) = f(suc(s) + i))
           by arbitrary i:Nat suppose i_a: i < a'
              enable {operator +, operator ≤}  replace add_suc in
              (apply (conjunct 0 of g_f_and_h_f)[suc(i)] to enable {operator <, operator ≤} i_a)
         have p2: all i:Nat. (if i < b then h(t + i) = f(suc(s) + (a' + i)))
           by arbitrary i:Nat suppose i_b: i < b
              suffices __ by definition 2*operator+
              definition operator+ in
              replace add_suc in
              apply (conjunct 1 of g_f_and_h_f)[i] to i_b
         apply IH[b,suc(s),t,f,g,h] to p1, p2
    replace fs_gs | IH' 
  }
end

/*
 Properties of equal
*/
theorem equal_refl: all n:Nat. equal(n,n)
proof
  induction Nat
  case 0 {
    definition equal
  }
  case suc(n') suppose IH {
    suffices equal(n',n')  by definition equal
    IH
  }
end

theorem equal_complete_sound : all m:Nat. all n:Nat.
  m = n ⇔ equal(m, n)
proof
  induction Nat
  case 0 {
    arbitrary n:Nat
    switch n {
      case 0 { definition equal }
      case suc(n') { definition equal }
    }
  }
  case suc(m') suppose IH {
    arbitrary n:Nat 
    switch n {
      case 0 { definition equal }
      case suc(n') {
        have right : (if suc(m') = suc(n') then equal(suc(m'), suc(n')))
          by suppose sm_sn: suc(m') = suc(n')
             suffices equal(m', n')  by definition equal
             have m_n: m' = n' by injective suc sm_sn
             suffices equal(n', n')  by replace m_n
             equal_refl[n']
        have left : (if equal(suc(m'), suc(n')) then suc(m') = suc(n'))
          by suppose sm_sn : equal(suc(m'), suc(n'))
             have e_m_n : equal(m', n') by definition equal in sm_sn
             have m_n : m' = n' by apply IH to e_m_n
             replace m_n
        right, left
      }
    }
  }
end

theorem not_equal_not_eq: all m:Nat, n:Nat.
  if not equal(m, n) then not (m = n)
proof
  arbitrary m:Nat, n:Nat
  suppose not_m_n
  suppose m_n
  have eq_m_n: equal(m, n) by suffices equal(n,n)  by replace m_n
                              equal_refl[n]
  apply not_m_n to eq_m_n
end

/*
 Properties of div2
 */
 
theorem div2_add_2: all n:Nat.  div2(suc(suc(n))) = suc(div2(n))
proof
  arbitrary n:Nat
  definition {div2, div2_helper, div2_helper}
end

theorem div2_double: all n:Nat.
  div2(n + n) = n
proof
  induction Nat
  case 0 {
    definition {operator+, div2, div2_helper}
  }
  case suc(n') suppose IH {
    suffices div2(suc(n' + suc(n'))) = suc(n')  by definition operator+
    suffices div2(suc(suc(n' + n'))) = suc(n')  by replace add_suc
    suffices suc(div2(n' + n')) = suc(n')       by replace div2_add_2
    replace IH
  }
end

theorem div2_times2: all n:Nat.
  div2(2 * n) = n
proof
  arbitrary n:Nat
  suffices div2(n + (n + 0)) = n  by definition {operator*,operator*,operator*}
  suffices div2(n + n) = n        by replace add_zero
  div2_double[n]
end

lemma div2_suc_double: all n:Nat.
  div2(suc(n + n)) = n
proof
  induction Nat
  case 0 {
    definition {operator+, div2, div2_helper, div2_helper}
  }
  case suc(n') suppose IH {
    suffices suc(div2_helper(suc(n' + n'), true)) = suc(n')
      by definition {div2, div2_helper, operator+, div2_helper} and replace add_suc
    suffices suc(div2_helper(n' + n', false)) = suc(n')
      by definition div2_helper
    replace (definition {div2, div2_helper} in IH)
  }
end

theorem div2_suc_times2: all n:Nat.
  div2(suc(2 * n)) = n
proof
  arbitrary n:Nat
  suffices div2(suc(n + (n + 0))) = n  by definition {operator*,operator*,operator*}
  suffices div2(suc(n + n)) = n        by replace add_zero
  div2_suc_double[n]
end

theorem sub_div2: all n:Nat. n - div2(n) ≤ suc(div2(n))
proof
  arbitrary n:Nat
  cases Even_or_Odd[n]
  case even {
    obtain k where n_2k: n = 2 * k from definition Even in even
    suffices k ≤ suc(k) by replace n_2k | div2_times2[k] | two_mult[k] | add_sub_identity[k,k]
    less_equal_suc
  }
  case odd {
    obtain k where n_s2k: n = suc(2 * k) from definition Odd in odd
    suffices suc(k + k) - k ≤ suc(k) by replace n_s2k | div2_suc_times2[k] | two_mult[k]
    have eq_1: suc(k + k) = 1 + (k + k) by definition {operator+, operator+}
    suffices (1 + (k + k)) - k ≤ suc(k) by replace eq_1
    have k_kk: k ≤ k + k by less_equal_add
    have eq_2: (1 + (k + k)) - k = 1 + ((k + k) - k) by symmetric apply sub_add_assoc[k + k, 1, k] to k_kk
    suffices 1 + ((k + k) - k) ≤ suc(k) by replace eq_2
    suffices ((k + k) - k) ≤ k by definition {operator+, operator+, operator≤}
    suffices k ≤ k by replace add_sub_identity[k,k]
    less_equal_refl
  }
end

theorem sub_div2_pos: all n:Nat. if 0 < n then 0 < n - div2(n)
proof
  arbitrary n:Nat
  cases Even_or_Odd[n]
  case even {
    obtain k where n_2k: n = 2 * k from definition Even in even
    suffices if 0 < k + k then 0 < k by replace n_2k | div2_times2[k] | two_mult[k] | add_sub_identity[k,k]
    switch k {
      case 0 {
        conclude if 0 < 0 + 0 then 0 < 0
           by definition {operator +}
      }
      case suc(k') {
        assume _
        definition {operator<, operator≤, operator≤}
      }
    }
  }
  case odd {
    obtain k where n_s2k: n = suc(2 * k) from definition Odd in odd
    suffices if 0 < suc(k + k) then 0 < suc(k + k) - k by replace n_s2k | div2_suc_times2[k] | two_mult[k]
    assume _
    have eq_1: suc(k + k) = 1 + (k + k) by definition {operator+, operator+}
    suffices 0 < (1 + (k + k)) - k by replace eq_1
    have k_kk: k ≤ k + k by less_equal_add
    have eq_2: (1 + (k + k)) - k = 1 + ((k + k) - k) by symmetric apply sub_add_assoc[k + k, 1, k] to k_kk
    suffices 0 < 1 + ((k + k) - k) by replace eq_2
    definition {operator+, operator<, operator≤, operator≤}
  }
end

lemma div2_aux_pos_less: all n:Nat. if 0 < n then div2(n) < n and div2_aux(n) ≤ n
proof
  induction Nat
  case 0 {
    assume: 0 < 0
    conclude false by apply less_irreflexive to recall 0 < 0
  }
  case suc(n') assume IH {
    assume: 0 < suc(n')
    switch n' {
      case 0 {
        definition {div2, div2_aux, operator<, operator≤, div2_helper, div2_helper, operator≤}
      }
      case suc(n'') assume np_eq {
        have: 0 < n' by {
            suffices 0 < suc(n'') by replace np_eq
            definition {operator<, operator≤, operator≤}
        }
        have IH': div2(n') < n' and div2_aux(n') ≤ n' by apply IH to (recall 0 < n')
        suffices (div2_helper(n'', true) ≤ n'' and div2_helper(n'', false) ≤ suc(n''))
          by definition {div2, div2_aux, div2_helper, div2_helper, operator<, operator≤, operator≤}
        have _1: div2_helper(n'', true) ≤ n'' by {
          definition {div2_aux, div2_helper, operator≤} in
          replace np_eq in
          conjunct 1 of IH'
        }
        have _2: div2_helper(n'', false) ≤ suc(n'') by {
          have lt1: div2_helper(n'', false) ≤ n'' by {
            definition {div2, div2_helper, operator<, operator≤} in
            replace np_eq in
            conjunct 0 of IH'
          }
          have lt2: n'' ≤ suc(n'') by less_equal_suc
          apply less_equal_trans to lt1, lt2
        }
        _1, _2
      }
    }
  }
end

theorem div2_pos_less: all n:Nat. if 0 < n then div2(n) < n
proof
  div2_aux_pos_less
end

theorem div2_aux_mono: all x:Nat, y:Nat.
  if x ≤ y then div2(x) ≤ div2(y) and div2_aux(x) ≤ div2_aux(y)
proof
  induction Nat
  case 0 {
    arbitrary y:Nat
    assume _
    conclude div2(0) ≤ div2(y) and div2_aux(0) ≤ div2_aux(y)
        by definition {div2, div2_aux, div2_helper, operator≤}
  }
  case suc(x') assume IH {
    arbitrary y:Nat
    assume sx_y
    switch y {
      case 0 assume y_eq {
        conclude false by definition operator≤ in replace y_eq in sx_y
      }
      case suc(y') assume y_eq {
        suffices div2_helper(x', false) ≤ div2_helper(y', false) and div2_helper(x', true) ≤ div2_helper(y', true)
            by definition {div2, div2_aux, div2_helper, operator≤}
        have xy: x' ≤ y' by apply suc_less_equal_iff_less_equal_suc to replace y_eq in sx_y
        definition {div2, div2_aux} in apply IH[y'] to xy
      }
    }
  }
end

theorem div2_mono: all x:Nat, y:Nat.
  if x ≤ y then div2(x) ≤ div2(y)
proof
  div2_aux_mono
end

/*
 Properties of pos2nat
 */

theorem pos_positive: all p:Pos. 0 < pos2nat(p)
proof
  induction Pos
  case one {
    definition {pos2nat, operator<, operator≤, operator≤}
  }
  case succ(p') {
    definition {pos2nat, operator<, operator≤, operator≤}
  }
end

/*
 Properties of pow2
 */
 
theorem pow_positive: all n:Nat. 0 < pow2(n)
proof
  induction Nat
  case 0 {
    definition {pow2, operator<, operator≤, operator≤}
  }
  case suc(n') suppose IH {
    suffices 0 < 2 * pow2(n')  by definition pow2
    obtain pn' where pn_s: pow2(n') = suc(pn')
        from apply positive_suc[pow2(n')] to IH
    suffices 0 < 2 * suc(pn')  by replace pn_s
    suffices 0 < suc(pn') + (suc(pn') + 0)  by definition {operator*,operator*,operator*}
    suffices 0 < suc(pn') + suc(pn')  by replace add_zero[suc(pn')]
    suffices 0 < suc(pn' + suc(pn'))  by definition operator+
    suffices 0 < suc(suc(pn' + pn'))  by replace add_suc[pn'][pn']
    definition {operator<, operator≤, operator≤}
  }
end

/*
 Properties of Division and Modulo
 */

lemma find_quotient_correct: all u:Nat. all q:Nat, n:Nat, m:Pos.
  if q * pos2nat(m) ≤ n and n < u * pos2nat(m)
  then some r : Nat. find_quotient(u, n, m, q) * pos2nat(m) + r = n
                     and r < pos2nat(m)
proof
  induction Nat
  case zero {
    arbitrary q:Nat, n:Nat, m:Pos
    suppose prem
    conclude false
      by definition {operator*, operator <, operator ≤} in prem
  }
  case suc(u') suppose IH {
    arbitrary q:Nat, n:Nat, m:Pos
    suppose prem
    have n_sn: n ≤ suc(n)   by less_equal_suc[n]
    switch suc(q) * pos2nat(m) ≤ n for find_quotient {
      case true suppose sqm_le_n_t {
        have sqm_le_n: suc(q) * pos2nat(m) ≤ n  by replace sqm_le_n_t
        switch n < u' * pos2nat(m) {
          case true suppose n_l_um_true {
            have n_l_um: n < u' * pos2nat(m)    by replace n_l_um_true
            have IH_sq: some r:Nat.
                   find_quotient(u',n,m,suc(q)) * pos2nat(m) +r = n
                   and r < pos2nat(m)
            by apply IH[suc(q),n,m] to sqm_le_n, n_l_um
            obtain r where Q: find_quotient(u',n,m,suc(q)) * pos2nat(m) + r = n
                   and r < pos2nat(m) from IH_sq
            choose r
            Q
          }
          case false suppose n_l_um_false {
            define M = pos2nat(m)
            define R = n - u' * M
            choose R
	    have um_le_n: u' * M ≤ n
	      by have not_n_l_um: not (n < u' * M)
	           by suffices not (n < u' * pos2nat(m))  by definition M
                      suppose p replace (definition M in n_l_um_false) in p
		 apply not_less_less_equal to not_n_l_um
	    have um_r_eq_n: u' * M + R = n
	      by suffices u' * M + (n - u' * M) = n  by definition R
	         apply sub_add_identity[n][u' * M] to um_le_n
	    have r_l_m: R < M
	      by suffices suc(n - u' * M) ≤ M  by definition {R, operator<}
	         have sn_le_um_m: suc(n) ≤ (u' * M) + M
		   by suffices suc(n) ≤ M + u' * M  by replace add_commute[u' * M][M]
                      suffices suc(n) ≤ pos2nat(m) + u' * pos2nat(m)  by definition M
		      definition {operator <, operator*, M} in prem
		 have um_le_sn: u' * M ≤ suc(n)
		   by apply less_equal_trans to um_le_n, n_sn
		 have sn_um_le_m: suc(n) - (u' * M) ≤ M
		   by apply less_equal_add_sub[suc(n)][u' * M, M]
		      to um_le_sn, sn_le_um_m
	         conclude suc(n - u' * M) ≤ M
		   by have eq: suc(n - u' * M) = suc(n) - u' * M
		        by definition {operator+,operator+} in
    		           apply sub_add_assoc[n][1, u'*M] to um_le_n
	              suffices suc(n) - u' * M ≤ M  by replace eq
                      sn_um_le_m
            um_r_eq_n, r_l_m
          }
        }
      }
      case false suppose sqn_g_n {
        define M = pos2nat(m)
        define R = n - q * M
        
        have qm_le_sn: q * M ≤ suc(n)
          by have qm_le_n: q * M ≤ n
               by suffices q * pos2nat(m) ≤ n  by definition M
                  definition M in prem
             apply less_equal_trans to qm_le_n, n_sn
        have sn_le_qm_m: suc(n) ≤ q * M + M
          by have not_sqm_le_n: not (suc(q) * M ≤ n)
                 by suppose p replace sqn_g_n in p
             have n_l_sqm: n < suc(q) * M
                 by apply not_less_equal_iff_greater to not_sqm_le_n
             replace add_commute[M][q*M] in
             definition {operator<,operator*} in n_l_sqm
        have sn_qm_le_m: suc(n) - q * M ≤ M
          by apply less_equal_add_sub to qm_le_sn, sn_le_qm_m
        have qm_le_n: q * M ≤ n   by suffices q * pos2nat(m) ≤ n  by definition M
                                     definition M in prem
        have s_nqm_le_m: suc(n - q * M) ≤ M
          by have eq: 1 + (n - q * M) = (1 + n) - q * M
               by apply sub_add_assoc[n][1,q*M] to qm_le_n
             have eq2: suc(n - q * M) = suc(n) - q * M
               by definition {operator+,operator+} in eq
             suffices suc(n) - q * M ≤ M  by replace eq2
             sn_qm_le_m
        have nqm_l_m: R < M
          by suffices suc(n - q * M) ≤ M  by definition {R,operator<}
             s_nqm_le_m

        have qm_r_eq_n: q * M + R = n
          by suffices q * M + (n - q * M) = n  by definition R
             apply sub_add_identity to qm_le_n
          
        choose n - q * M
        enable {R,M} qm_r_eq_n, nqm_l_m
      }
    }
  }
end

theorem mod_def: all n:Nat, m:Pos.
  n % m = n - (n / m) * pos2nat(m)
proof
  definition {operator%}
end

theorem division: all n:Nat, m:Pos.
  some r : Nat. (n / m) * pos2nat(m) + r = n  and  r < pos2nat(m)
proof
  arbitrary n:Nat, m:Pos
  switch n {
    case 0 {
      choose 0
      suffices 1 ≤ pos2nat(m)  by definition {operator/, operator*, operator+, operator<}
      definition operator< in pos_positive[m]
    }
    case suc(n') suppose n_sn {
      have qm_le_n: 0 * pos2nat(m) ≤ n
	by definition {operator*,operator≤}
      define u = suc(n) * pos2nat(m)
      have n_l_um: n < u * pos2nat(m)
        by suffices suc(n) ≤ (pos2nat(m) + n * pos2nat(m)) * pos2nat(m)
              by definition {operator<, u, operator*}
	   switch m {
	     case one {
               suffices suc(n) ≤ suc(n * 1) * 1    by definition {pos2nat, operator+, operator+}
	       suffices suc(n) ≤ suc(n * 1)        by replace mult_one[suc(n * 1)]
	       suffices suc(n) ≤ suc(n)            by replace mult_one[n]
	       less_equal_refl[suc(n)]
	     }
	     case succ(m') suppose m_sm {
	       suffices suc(n) ≤ (suc(pos2nat(m')) + n * suc(pos2nat(m'))) * suc(pos2nat(m'))
                 by definition pos2nat
               define M = pos2nat(m')
               suffices n ≤ M + (M + n * suc(M)) * suc(M)
                  by definition {operator+, operator*, operator+, operator≤}
               have eq: M + (M + n * suc(M)) * suc(M)
                      = n + ((M * n + M) + (M * ((n + M * n) + M) + M)) 
                 by equations M + (M + n * suc(M)) * suc(M)
                           = (M + n * suc(M)) * suc(M) + M    by add_commute[M][(M + n * suc(M)) * suc(M)]
                       ... = (M + suc(M) * n) * suc(M) + M    by replace mult_commute[n][suc(M)]
                       ... = (M + n + M * n) * suc(M) + M   by replace suc_mult[M,n]
                       ... =  (n + M * n + M) * suc(M) + M  by replace add_commute[M][n + M*n]
                       ... = suc(M) * (n + M * n + M) + M
                                      by replace mult_commute[((n + M * n) + M)][suc(M)]
                       ... = n + M * n + M + M * (n + M * n + M) + M
                                      by definition operator*
               suffices n ≤ n + M * n + M + M * (n + M * n + M) + M
                 by replace eq
               less_equal_add[n][((M * n + M) + (M * ((n + M * n) + M) + M))]
	     }
	   }
      have fqc: some r:Nat. find_quotient(u, n, m, 0) * pos2nat(m) + r = n
                    and r < pos2nat(m)
        by apply find_quotient_correct[u][0, n, m] to qm_le_n, n_l_um
      obtain r where R: find_quotient(u, n, m, 0) * pos2nat(m) + r = n
			and r < pos2nat(m)
	  from fqc
      choose r
      suffices find_quotient(suc(suc(n')) * pos2nat(m),suc(n'),m,0) * pos2nat(m) + r = suc(n') and r < pos2nat(m)
        by definition operator/
      suffices find_quotient(suc(n) * pos2nat(m),n,m,0) * pos2nat(m) + r = n and r < pos2nat(m)
        by replace symmetric n_sn
      definition u in R
    }
  }
end

theorem division_remainder: all n:Nat, m:Pos.
  (n / m) * pos2nat(m) + (n % m) = n
proof
  arbitrary n:Nat, m:Pos
  suffices (n / m) * pos2nat(m) + (n - (n / m) * pos2nat(m)) = n
      by replace mod_def[n,m]
  define a = (n / m) * pos2nat(m)
  obtain r where R: (n / m) * pos2nat(m) + r = n and r < pos2nat(m)
    from division[n, m]
  have ar_n: a + r = n   by suffices (n / m) * pos2nat(m) + r = n
                               by definition a
                            R
  have a_le_a_r: a ≤ a + r  by less_equal_add[a][r]
  have n_eq_a_r: n = a + r
    by suffices n = (n / m) * pos2nat(m) + r by definition a
       symmetric conjunct 0 of R
  have a_le_n: a ≤ n   by suffices a ≤ a + r by replace n_eq_a_r
                          a_le_a_r
  conclude a + (n - a) = n
    by apply sub_add_identity to a_le_n
end

theorem remainder_less_divisor: all n:Nat, m:Pos.
  n % m < pos2nat(m)
proof
  arbitrary n:Nat, m:Pos
  suffices n - (n / m) * pos2nat(m) < pos2nat(m)
      by replace mod_def[n,m]
  define a = (n / m) * pos2nat(m)
  obtain r where R: (n / m) * pos2nat(m) + r = n and r < pos2nat(m)
    from division[n, m]
  have ar_n: a + r = n
       by suffices (n / m) * pos2nat(m) + r = n by definition a
          R
  have ar_a_a: (a + r) - a = r  by add_sub_identity[a][r]
  have r_na: r = n - a  by suffices r = (a + r) - a by replace symmetric ar_n
                           symmetric ar_a_a
  suffices r < pos2nat(m)   by replace symmetric r_na
  conjunct 1 of R
end

/*
theorem div_one: all n:Nat.
  n / one = n
proof
  arbitrary n:Nat
  switch n {
    case zero {
      definition operator/
    }
    case suc(n') {
      _definition operator/
      sorry
    }
  }
end
*/
