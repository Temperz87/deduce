import Nat
import List
import Set
import MultiSet
import Maps

function search(List<Nat>, Nat) -> Nat {
  search(empty, y) = 0
  search(node(x, xs), y) =
    if x = y then 0
    else suc(search(xs, y))
}

theorem search_take: all xs: List<Nat>. all y:Nat.
    not (y ∈ set_of(take(search(xs, y), xs)))
proof
  induction List<Nat>
  case [] {
    arbitrary y:Nat
    suffices not (y ∈ ∅) by evaluate
    empty_no_members<Nat>
  }
  case node(x, xs')
    assume IH: all y:Nat. not (y ∈ set_of(take(search(xs', y), xs')))
  {
    arbitrary y:Nat
    switch x = y for search {
      case true {
        suffices not (y ∈ ∅) by evaluate
        empty_no_members<Nat>
      }
      case false assume xy_false: (x = y) = false {
        suffices not (x = y or y ∈ set_of(take(search(xs', y), xs')))
            by evaluate
        assume prem: x = y or y ∈ set_of(take(search(xs', y), xs'))
        cases prem
        case: x = y {
          conclude false by rewrite xy_false in (recall x = y)
        }
        case y_in_rest: y ∈ set_of(take(search(xs', y), xs')) {
          conclude false by apply IH to y_in_rest
        }
      }
    }
  }
end
