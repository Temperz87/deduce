import Nat
import UInt
import List
import Maps

private define L1 = node(1, node(2, empty))
private define L2 = node(3, node(4, node(5, empty)))
private define L3 : List<UInt> = node(1, node(2, node(3, node(4, node(5, empty)))))

assert length(L1) = 2
assert length(L3) = 5
assert L1 ++ L2 = L3
assert reverse(L1) = node(2, node(1, empty))
assert reverse(L2) = node(5, node(4, node(3, empty)))
assert length(L1 ++ L2) = length(L1) + length(L2)

assert map(L1, (fun x : UInt { 1 + x })) = node(2, node(3, empty))

assert foldr(L1, 0, λa,b{ a + b }) = 3
assert foldr(L1, @empty<UInt>, λx,ls{ node(x,ls) }) = L1

assert foldl(L1, 0, λa,b{ a + b }) = 3
assert foldl(L1, @empty<UInt>, λls,x{ node(x,ls) }) = node(2,node(1,empty))

assert down_from(ℕ2) = node(ℕ1, node(ℕ0, empty))

assert up_to(ℕ2) = node(ℕ0, node(ℕ1, empty))
assert up_to(ℕ3) = node(ℕ0, node(ℕ1, node(ℕ2, empty)))

assert range(ℕ0, ℕ0) = empty
assert range(ℕ0, ℕ1) = [ℕ0]
assert range(ℕ0, ℕ2) = node(ℕ0, node(ℕ1, empty))
assert range(ℕ1, ℕ3) = node(ℕ1, node(ℕ2, empty))
assert range(ℕ2, ℕ5) = node(ℕ2, node(ℕ3, node(ℕ4, empty)))

assert interval(ℕ0, ℕ0) = empty
assert interval(ℕ1, ℕ0) = node(ℕ0, empty)
assert interval(ℕ2, ℕ0) = node(ℕ0, node(ℕ1, empty))
assert interval(ℕ3, ℕ0) = node(ℕ0, node(ℕ1, node(ℕ2, empty)))

assert interval(ℕ0, ℕ3) = empty
assert interval(ℕ1, ℕ3) = node(ℕ3, empty)
assert interval(ℕ2, ℕ3) = node(ℕ3, node(ℕ4, empty))
assert interval(ℕ3, ℕ3) = node(ℕ3, node(ℕ4, node(ℕ5, empty)))

assert (node(1, empty) ++ node(2, empty)) ++ node(3, empty)
     = node(1, empty) ++ (node(2, empty) ++ node(3, empty))

define id_nat : fn UInt -> UInt = λx{x}

assert (id_nat .o. id_nat)(0) = 0

assert length(@empty<UInt>) = 0
assert length(node(42, empty)) = 1



