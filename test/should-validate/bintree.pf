union Nat {
  zero
  suc(Nat)
}

function operator +(Nat,Nat) -> Nat {
  operator +(zero, m) = m
  operator +(suc(n), m) = suc(n + m)
}

function max(Nat,Nat) -> Nat {
  max(zero, n) = n
  max(suc(m'), n) =
    switch n {
      case zero { suc(m') }
      case suc(n') { suc(max(m',n')) }
    }
}

union Tree {
  empty
  node(Nat, Tree, Tree)
}

function height(Tree) -> Nat {
  height(empty) = 0
  height(node(n,L,R)) = 1 + max(height(L), height(R))
}

function sum(Tree) -> Nat {
  sum(empty) = 0
  sum(node(n,L,R)) = n + sum(L) + sum(R)
}

/*
     t3= 4
       /   \
  t1= 3     7 =t2
     
*/

define t1 = node(suc(suc(suc(zero))), empty, empty)
define t2 = node(7, empty, empty)
define t3 = node(4, t1, t2)

assert height(t3) = 2
assert sum(t3) = 14

