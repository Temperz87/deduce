union A {
    a
    b
}

fun test(x : A){
    switch x {
        case a { true }
        case b { false }
    }
}


theorem test_thm: all x:A. test(x) = true or test(x) = false
proof
    arbitrary x:A
    switch x {
        case a assume G {
            suffices test(x) = true by rewrite symmetric G
            suffices test(a) = true by rewrite G
            evaluate
        }
        case b {
            suffices test(x) = false by rewrite symmetric recall x = b
            suffices test(b) = false by rewrite recall x = b
            evaluate
        }
    }
end