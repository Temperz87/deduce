import Nat
import List

theorem length_node42: length([42]) = 1
proof
  suffices 1 + 0 = 1
      by expand 2*length.
  add_zero[1]
end

theorem length_one_nat_again: all x:Nat. length([x]) = 1
proof
  arbitrary x:Nat
  suffices 1 + 0 = 1
      by expand 2*length.
  add_zero[1]
end

theorem append_xy:
  all T:type. all x:T, y:T. [x] ++ [y] = [x, y]
proof
    arbitrary T:type
    arbitrary x:T, y:T
    expand 2*operator ++.
end

theorem length_one_equal: all U:type. all x:U, y:U.
  length([x]) = length([y])
proof
  arbitrary U:type
  arbitrary x:U, y:U
  evaluate
end


theorem append_empty_again: all U :type. all xs :List<U>.
  xs ++ [] = xs
proof
  arbitrary U:type
  induction List<U>
  case [] {
    conclude @[]<U> ++ [] = []  by expand operator++.
  }
  case node(n, xs') suppose IH: xs' ++ empty = xs' {
    equations
      node(n,xs') ++ empty
          = node(n, xs' ++ empty)   by expand operator++.
      ... = node(n,xs')             by replace IH.
  }
end
