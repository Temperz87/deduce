// Generated by ./doc/convert.py

import Nat
define five = 2 + 3
define six : Nat = 1 + five
print five
fun area(h:Nat, w:Nat) {
  h * w
}
print area(3, 4)
union NatList {
  Empty
  Node(Nat, NatList)
}
define NL12 = Node(1, Node(2, Empty))
union List<T> {
  empty
  node(T, List<T>)
}
define L12 = node(1, node(2, empty))
import Option
 
fun front(ls : NatList) {
  switch ls {
    case Empty { @none<Nat> }
    case Node(x, ls') { just(x) }
  }
}
print front(NL12)
print (if true then 7 else 5+6)
assert (if true then 7 else 5+6) = 7
recursive len(NatList) -> Nat {
  len(Empty) = 0
  len(Node(n, next)) = 1 + len(next)
}
recursive app(NatList, NatList) -> NatList {
  app(Empty, ys) = ys
  app(Node(n, xs), ys) = Node(n, app(xs, ys))
}
recursive length<E>(List<E>) -> Nat {
  length(empty) = 0
  length(node(n, next)) = 1 + length(next)
}
assert length([42]) = 1
assert length(@[]<Nat>) = 0
fun head<T>(ls: List<T>) {
  switch ls {
    case empty { @none<T> }
    case node(x, ls') { just(x) }
  }
}
recursive all_elements<T>(List<T>, fn T->bool) -> bool {
  all_elements(empty, P) = true
  all_elements(node(x, xs'), P) = P(x) and all_elements(xs', P)
}
union Pair<T,U> {
  pair(T,U)
}
