import Option

union Nat {
  zero
  suc(Nat)
}

union Pos {
  one
  succ(Pos)
}

recursive nat2pos(Nat) -> Option<Pos> {
  nat2pos(0) = none
  nat2pos(suc(n')) =
    switch nat2pos(n') {
      case none {
        just(one)
      }
      case just(p) {
        just(succ(p))
      }
    }
}

recursive div_helper(Nat,Nat,Pos,Pos) -> Nat {
  div_helper(0, k, m, j) = k
  div_helper(suc(n'), k, m, j) =
    switch j {
      case one {
        div_helper(n', suc(k), m, m)
      }
      case succ(j') {
        div_helper(n', k, m, j')
      }
    }
}

fun operator /(n : Nat, m : Pos) {
  switch n {
    case 0 { ℕ0 }
    case suc(n') { div_helper(suc(n'), ℕ0, m, m) }
  }
}

define three_div : fn Pos -> Nat = λd{ ℕ3 / d }
assert default(after(nat2pos(ℕ3), three_div), ℕ0) = ℕ1
