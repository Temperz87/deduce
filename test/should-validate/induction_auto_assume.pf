union Nat {
  zero
  suc(Nat)
}
recursive operator +(Nat,Nat) -> Nat {
  operator +(zero, m) = m
  operator +(suc(n), m) = suc(n + m)
}

theorem add_zero_auto: all x:Nat. x + zero = x
proof
    induction Nat
    case 0 { evaluate }
    case suc(n') {
        suffices suc(n' + zero) = suc(n') by evaluate
        replace recall n' + zero = n'.
    }
end
