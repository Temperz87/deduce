import Nat

recfun fib(n : Nat) -> Nat
  measure n of Nat
{
  switch n {
    case 0 { ℕ0 }
    case suc(n1) {
      switch n1 {
        case 0 { ℕ1 }
        case suc(n2) {
          fib(n1) + fib(n2)
        }
      }
    }
  }
}
terminates  {
  arbitrary n:Nat
  have A: all n1:Nat, n2:Nat. if (n = suc(n1) and n1 = suc(n2)) then n1 < n by {
    arbitrary n1:Nat, n2:Nat
    assume prem: n = suc(n1) and n1 = suc(n2)
    suffices suc(n2) < suc(suc(n2))
      by replace conjunct 0 of prem | conjunct 1 of prem.
    suffices suc(suc(n2)) ≤ suc(suc(n2)) by expand operator <.
    less_equal_refl
  }
  have B: all n1:Nat, n2:Nat. if (n = suc(n1) and n1 = suc(n2)) then n2 < n by {
    arbitrary n1:Nat, n2:Nat
    assume prem: n = suc(n1) and n1 = suc(n2)
    suffices n2 < suc(suc(n2))
      by replace conjunct 0 of prem | conjunct 1 of prem.
    suffices suc(n2) ≤ suc(suc(n2)) by expand operator <.
    less_equal_suc
  }
  A, B
}




