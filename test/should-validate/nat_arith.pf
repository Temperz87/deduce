import Nat

theorem add_2_0: ℕ2 + ℕ0 = ℕ2
proof
  .
end

theorem add_x_0: all x:Nat. x + ℕ0 = x
proof
  .
end

theorem add_0_x: all x:Nat. ℕ0 + x = x
proof
  .
end

theorem T: all x:Nat. x + ℕ3 + ℕ4 = ℕ5 + ℕ2 + x
proof
  arbitrary x:Nat
  equations
      x + ℕ3 + ℕ4
        = x + ℕ7 by evaluate
    ... = ℕ7 + x by add_commute
    ... = ℕ5 + ℕ2 + x by evaluate
end

theorem div_0_2: ℕ0 / ℕ2 = ℕ0
proof
  .
end

theorem div_2_2: ℕ2 / ℕ2 = ℕ1
proof
  .
end

theorem div_4_2: ℕ4 / ℕ2 = ℕ2
proof
  .
end

theorem div_4_2b: ℕ4 / ℕ2 = ℕ2
proof
  equations
      ℕ4 / ℕ2 = (ℕ2 + ℕ2) / ℕ2     by .
          ... = ℕ2 / ℕ2 + ℕ2 / ℕ2  by .
          ... = ℕ2                  by .
end

theorem zero_greater: not (ℕ0 < ℕ0)
proof
  .
end

