import List 
import Nat

theorem length_drop2 : <T> all n : Nat, xs : List<T>.
  length(drop(n, xs)) = length(xs) - n
proof
  arbitrary T:type
  induction Nat
  case 0 {
    arbitrary xs : List<T>
    suffices length(xs) = length(xs) - 0  by definition drop
    replace sub_zero[length(xs)]
  }
  case suc(n') assume IH {
    arbitrary xs : List<T>
    // Make sure TermInst is explicit around the empty list.
    suffices ? by definition drop
    ?
  }
end
