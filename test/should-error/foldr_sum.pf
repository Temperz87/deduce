import Nat
import List

recursive sum(List<Nat>) -> Nat {
  sum(empty) = ℕ0
  sum(node(n, ns)) = n + sum(ns)
}

// also lalr parser error
theorem foldr_eq_sum : all ls : List<Nat>. sum(ls) = foldr(ls, ℕ0, operator +)
proof
  induction List<Nat>
  case empty {
    expand foldr | sum.
  }
  case node(a, d) suppose IH {
    expand foldr
    ?
  }
end
