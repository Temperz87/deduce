import Nat
import List

function sum(List<Nat>) -> Nat {
  sum(empty) = 0
  sum(node(n, ns)) = n + sum(ns)
}

// also lalr parser error
theorem foldr_eq_sum : all ls : List<Nat>. sum(ls) = foldr(ls, 0, operator +)
proof
  induction List<Nat>
  case empty {
    definition { foldr, sum }
  }
  case node(a, d) suppose IH {
    suffices ? by definition {foldr} 
    ?
  }
end
