import List
import Nat

recursive sum(List<Nat>) -> Nat {
  sum(empty) = ℕ0
  sum(node(n, ns)) = n + sum(ns)
}


theorem foldr_eq_sum : all ls : List<Nat>. sum(ls) = foldr(ls, ℕ0, operator+)
proof
  arbitrary ls : List<Nat>
  switch ls {
    case empty {
      expand sum
      ?
    }
    case node(a, d) {
      ?
    }
  }
end
