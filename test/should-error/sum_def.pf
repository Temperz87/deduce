import Nat
import List

recursive sum(List<Nat>) -> Nat {
  sum([]) = â„•0
  sum(node(x,ls)) = x + sum(ls)
}

theorem sum_reverse:
all ls : List<Nat>. sum(ls) = sum(reverse(ls))
proof
  induction List<Nat>
  case [] {
    expand sum
    ?
  }
  case node(x, ls) suppose IH {
    ?
  }
end
